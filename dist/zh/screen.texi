@c ===========================================================================
@c
@c This file was generated with po4a. Translate the source file.
@c
@c ===========================================================================

@c This is part of the Emacs manual.
@c Copyright (C) 1985--1987, 1993--1995, 1997, 2001--2020 Free Software
@c Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node 屏幕
@chapter 屏幕的组织方式
@cindex screen
@cindex frame

  在图形显示器上，例如在使用X窗口系统的GNU/Linux上，Emacs占据一个图形窗口。在文本终端上，Emacs占据整个终端屏幕。我们将使用@dfn
{窗体}一词来表示Emacs占用的图形窗口或终端屏幕。Emacs在这两种窗体上的行为非常相似。它通常只以一个窗体开始，但是您可以根据需要创建其他窗体（@pxref
{Frames}）。

  每个窗体由几个不同的区域组成。窗体的顶部是@dfn
{菜单栏}，它使您可以通过一系列菜单访问命令。在图形显示器上，菜单栏正下方是@dfn{工具栏}，这是一行图标，当您单击它们时，它们会执行编辑命令。在窗体的最底部是@dfn{回显区}，在此显示信息性消息，并在Emacs要求输入信息时在其中输入信息。

  位于工具栏(如果存在)下方、回显区上方的窗体主区域称为@dfn{窗口}。此后，在本手册中，我们将在此意义上使用单词``窗口''
。图形显示系统通常使用具有不同含义的词``窗口''；但是如上所述，我们将那些图形窗口称为``窗体''。

  Emacs窗口显示@dfn{缓冲区}——您正在编辑或查看的文本或其他图形。在图形显示器上，窗口的一侧有一个@dfn{滚动条}，可用于在缓冲区中滚动。窗口的最后一行是@dfn{状态栏}。这将显示有关缓冲区中正在进行的操作的各种信息，例如是否存在未保存的更改、正在使用的编辑模式、当前行号等。

  启动Emacs时，窗体中通常只有一个窗口。但是，您可以水平或垂直分割此窗口以创建多个窗口，每个窗口都可以独立显示一个缓冲区(@pxref{Windows})。

  在任何时候，都有一个窗口是@dfn{选定窗口}。在图形显示器上，所选窗口显示较突出的光标(通常为实心且闪烁)；其他窗口显示较不突出的光标(通常为空心框)。在文本终端上，只有一个光标显示在所选窗口中。在选定窗口中显示的缓冲区称为
@dfn{当前缓冲区}，它是进行编辑的地方。大多数Emacs命令都隐式应用于当前缓冲区；显示在未选中窗口中的文本大多可见以供参考。如果在图形显示上使用多个窗体，则选择特定窗体将选择该窗体中的一个窗口。

@menu
* 游标::                   文本中操作编辑命令的位置。
* 回显区::                显示在屏幕底部的短消息。
* 状态栏::                状态栏的解释。
* 菜单栏::                如何使用菜单栏。
@end menu

@node 游标
@section 游标
@cindex point
@cindex cursor

  The cursor in the selected window shows the location where most editing
commands take effect, which is called @dfn{point}@footnote{The term
``point'' comes from the character @samp{.}, which was the command in TECO
(the language in which the original Emacs was written)  for accessing the
editing position.}.  Many Emacs commands move point to different places in
the buffer; for example, you can place point by clicking mouse button 1
(normally the left button) at the desired location.

  By default, the cursor in the selected window is drawn as a solid block and
appears to be @emph{on} a character, but you should think of point as
@emph{between} two characters; it is situated @emph{before} the character
under the cursor.  For example, if your text looks like @samp{frob} with the
cursor over the @samp{b}, then point is between the @samp{o} and the
@samp{b}.  If you insert the character @samp{!} at that position, the result
is @samp{fro!b}, with point between the @samp{!} and the @samp{b}.  Thus,
the cursor remains over the @samp{b}, as before.

  If you are editing several files in Emacs, each in its own buffer, each
buffer has its own value of point.  A buffer that is not currently displayed
remembers its value of point if you later display it again.  Furthermore, if
a buffer is displayed in multiple windows, each of those windows has its own
value of point.

  @xref{Cursor Display}, for options that control how Emacs displays the
cursor.

@node 回显区
@section The Echo Area
@cindex echo area

  The line at the very bottom of the frame is the @dfn{echo area}.  It is used
to display small amounts of text for various purposes.

@cindex echoing
  The echo area is so-named because one of the things it is used for is
@dfn{echoing}, which means displaying the characters of a multi-character
command as you type.  Single-character commands are not echoed.
Multi-character commands (@pxref{按键}) are echoed if you pause for more than
a second in the middle of a command.  Emacs then echoes all the characters
of the command so far, to prompt you for the rest.  Once echoing has
started, the rest of the command echoes immediately as you type it.  This
behavior is designed to give confident users fast response, while giving
hesitant users maximum feedback.

@cindex error message
@cindex echo area message
  The echo area is also used to display an @dfn{error message} when a command
cannot do its job.  Error messages may be accompanied by beeping or by
flashing the screen.

  Some commands display informative messages in the echo area to tell you what
the command has done, or to provide you with some specific information.
These @dfn{informative} messages, unlike error messages, are not accompanied
with a beep or flash.  For example, @kbd{C-x =} (hold down @key{Ctrl} and
type @kbd{x}, then let go of @key{Ctrl} and type @kbd{=}) displays a message
describing the character at point, its position in the buffer, and its
current column in the window.  Commands that take a long time often display
messages ending in @samp{...} while they are working (sometimes also
indicating how much progress has been made, as a percentage), and add
@samp{done} when they are finished.

@cindex @file{*Messages*} buffer
@cindex saved echo area messages
@cindex messages saved from echo area
@vindex message-log-max
  Informative echo area messages are saved in a special buffer named
@file{*Messages*}.  (We have not explained buffers yet; see @ref{Buffers},
for more information about them.)  If you miss a message that appeared
briefly on the screen, you can switch to the @file{*Messages*} buffer to see
it again.  The @file{*Messages*} buffer is limited to a certain number of
lines, specified by the variable @code{message-log-max}.  (We have not
explained variables either; see @ref{Variables}, for more information about
them.)  Beyond this limit, one line is deleted from the beginning whenever a
new message line is added at the end.

  @xref{Display Custom}, for options that control how Emacs uses the echo
area.

  The echo area is also used to display the @dfn{minibuffer}, a special window
where you can input arguments to commands, such as the name of a file to be
edited.  When the minibuffer is in use, the text displayed in the echo area
begins with a @dfn{prompt string}, and the active cursor appears within the
minibuffer, which is temporarily considered the selected window.  You can
always get out of the minibuffer by typing @kbd{C-g}.  @xref{迷你缓冲区}.

@node 状态栏
@section The Mode Line
@cindex mode line
@cindex top level

  At the bottom of each window is a @dfn{mode line}, which describes what is
going on in the current buffer.  When there is only one window, the mode
line appears right above the echo area; it is the next-to-last line in the
frame.  On a graphical display, the mode line is drawn with a 3D box
appearance.  Emacs also usually draws the mode line of the selected window
with a different color from that of unselected windows, in order to make it
stand out.

  The text displayed in the mode line has the following format:

@example
 @var{cs}:@var{ch}-@var{fr}  @var{buf}      @var{pos} @var{line}   (@var{major} @var{minor})
@end example

@noindent
On a text terminal, this text is followed by a series of dashes extending to
the right edge of the window.  These dashes are omitted on a graphical
display.

The @var{cs} string and the colon character after it describe the character
set and newline convention used for the current buffer.  Normally, Emacs
automatically handles these settings for you, but it is sometimes useful to
have this information.

  @var{cs} describes the character set of the text in the buffer
(@pxref{Coding Systems}).  If it is a dash (@samp{-}), that indicates no
special character set handling (with the possible exception of end-of-line
conventions, described in the next paragraph).  @samp{=} means no conversion
whatsoever, and is usually used for files containing non-textual data.
Other characters represent various @dfn{coding systems}---for example,
@samp{1} represents ISO Latin-1.

  On a text terminal, @var{cs} is preceded by two additional characters that
describe the coding systems for keyboard input and terminal output.
Furthermore, if you are using an input method, @var{cs} is preceded by a
string that identifies the input method (@pxref{Input Methods}).

@cindex end-of-line convention, mode-line indication
  The character after @var{cs} is usually a colon.  If a different string is
displayed, that indicates a nontrivial end-of-line convention for encoding a
file.  Usually, lines of text are separated by @dfn{newline characters} in a
file, but two other conventions are sometimes used.  The MS-DOS convention
uses a carriage return character followed by a linefeed character; when
editing such files, the colon changes to either a backslash (@samp{\}) or
@samp{(DOS)}, depending on the operating system.  Another convention,
employed by older Macintosh systems, uses a carriage return character
instead of a newline; when editing such files, the colon changes to either a
forward slash (@samp{/}) or @samp{(Mac)}.  On some systems, Emacs displays
@samp{(Unix)} instead of the colon for files that use newline as the line
separator.

  On frames created for @command{emacsclient} (@pxref{Invoking emacsclient}),
the next character is @samp{@@}.  This indication is typical for frames of
an Emacs process running as a daemon (@pxref{Emacs Server}).

  The next element on the mode line is the string indicated by @var{ch}.  This
shows two dashes (@samp{--}) if the buffer displayed in the window has the
same contents as the corresponding file on the disk; i.e., if the buffer is
unmodified.  If the buffer is modified, it shows two stars (@samp{**}).  For
a read-only buffer, it shows @samp{%*} if the buffer is modified, and
@samp{%%} otherwise.

  The character after @var{ch} is normally a dash (@samp{-}).  However, if
@code{default-directory} (@pxref{File Names}) for the current buffer is on a
remote machine, @samp{@@} is displayed instead.

  @var{fr} gives the selected frame name (@pxref{Frames}).  It appears only on
text terminals.  The initial frame's name is @samp{F1}.

  @var{buf} is the name of the buffer displayed in the window.  Usually, this
is the same as the name of a file you are editing.  @xref{Buffers}.

  @var{pos} tells you whether there is additional text above the top of the
window, or below the bottom.  If your buffer is small and all of it is
visible in the window, @var{pos} is @samp{All}.  Otherwise, it is @samp{Top}
if you are looking at the beginning of the buffer, @samp{Bot} if you are
looking at the end of the buffer, or @samp{@var{nn}%}, where @var{nn} is the
percentage of the buffer above the top of the window.  With Size Indication
mode, you can display the size of the buffer as well.  @xref{Optional Mode
Line}.

  @var{line} is the character @samp{L} followed by the line number at point.
(You can display the current column number too, by turning on Column Number
mode.  @xref{Optional Mode Line}.)

  @var{major} is the name of the @dfn{major mode} used in the buffer.  A major
mode is a principal editing mode for the buffer, such as Text mode, Lisp
mode, C mode, and so forth.  @xref{Major Modes}.  Some major modes display
additional information after the major mode name.  For example, Compilation
buffers and Shell buffers display the status of the subprocess.

  @var{minor} is a list of some of the enabled @dfn{minor modes}, which are
optional editing modes that provide additional features on top of the major
mode.  @xref{Minor Modes}.

  Some features are listed together with the minor modes whenever they are
turned on, even though they are not really minor modes.  @samp{Narrow} means
that the buffer being displayed has editing restricted to only a portion of
its text (@pxref{Narrowing}).  @samp{Def} means that a keyboard macro is
currently being defined (@pxref{Keyboard Macros}).

  In addition, if Emacs is inside a recursive editing level, square brackets
(@samp{[@dots{}]}) appear around the parentheses that surround the modes.
If Emacs is in one recursive editing level within another, double square
brackets appear, and so on.  Since recursive editing levels affect Emacs
globally, such square brackets appear in the mode line of every window.
@xref{Recursive Edit}.

  You can change the appearance of the mode line as well as the format of its
contents.  @xref{Optional Mode Line}.  In addition, the mode line is
mouse-sensitive; clicking on different parts of the mode line performs
various commands.  @xref{Mode Line Mouse}.  Also, hovering the mouse pointer
above mouse-sensitive portions of the mode line shows tooltips
(@pxref{Tooltips}) with information about commands you can invoke by
clicking on the mode line.

@node 菜单栏
@section The Menu Bar
@cindex menu bar

  Each Emacs frame normally has a @dfn{menu bar} at the top which you can use
to perform common operations.  There's no need to list them here, as you can
more easily see them yourself.

  On a display that supports a mouse, you can use the mouse to choose a
command from the menu bar.  An arrow on the right edge of a menu item means
it leads to a subsidiary menu, or @dfn{submenu}.  A @samp{...} at the end of
a menu item means that the command will prompt you for further input before
it actually does anything.

  Some of the commands in the menu bar have ordinary key bindings as well; if
so, a key binding is shown after the item itself.  To view the full command
name and documentation for a menu item, type @kbd{C-h k}, and then select
the menu bar with the mouse in the usual way (@pxref{按键帮助}).

@kindex F10
@findex menu-bar-open
@cindex menu bar access using keyboard
  Instead of using the mouse, you can also invoke the first menu bar item by
pressing @key{F10} (to run the command @code{menu-bar-open}).  You can then
navigate the menus with the arrow keys or with @kbd{C-b}, @kbd{C-f}
(left/right), @kbd{C-p}, and @kbd{C-n} (up/down).  To activate a selected
menu item, press @key{RET}; to cancel menu navigation, press @kbd{C-g} or
@kbd{@key{ESC} @key{ESC} @key{ESC}}.  (However, note that when Emacs was
built with a GUI toolkit, the menus are drawn and controlled by the toolkit,
and the key sequences to cancel menu navigation might be different from the
above description.)

@kindex M-`
@findex tmm-menubar
@vindex tty-menu-open-use-tmm
  On a text terminal, you can optionally access the menu-bar menus in the echo
area.  To this end, customize the variable @code{tty-menu-open-use-tmm} to a
non-@code{nil} value.  Then typing @key{F10} will run the command
@code{tmm-menubar} instead of dropping down the menu.  (You can also type
@kbd{M-`}, which always invokes @code{tmm-menubar}.)  @code{tmm-menubar}
lets you select a menu item with the keyboard.  A provisional choice appears
in the echo area.  You can use the up and down arrow keys to move through
the menu to different items, and then you can type @key{RET} to select the
item.  Each menu item is also designated by a letter or digit (usually the
initial of some word in the item's name).  This letter or digit is separated
from the item name by @samp{==>}.  You can type the item's letter or digit
to select the item.
