msgid ""
msgstr ""
"Project-Id-Version: emacs-manual-chinese\n"
"POT-Creation-Date: 2021-01-06 19:00+0800\n"
"PO-Revision-Date: 2021-01-09 06:15\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: emacs-manual-chinese\n"
"X-Crowdin-Project-ID: 436220\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /27.1/pot/kmacro.texi.pot\n"
"X-Crowdin-File-ID: 296\n"

#. type: chapter
#: src/kmacro.texi:5 src/kmacro.texi:6
#, no-wrap
msgid "Keyboard Macros"
msgstr ""

#. type: cindex
#: src/kmacro.texi:7
#, no-wrap
msgid "defining keyboard macros"
msgstr ""

#. type: cindex
#: src/kmacro.texi:8
#, no-wrap
msgid "keyboard macro"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:12
msgid "In this chapter we describe how to record a sequence of editing commands so you can repeat it conveniently later."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:18
msgid "A @dfn{keyboard macro} is a command defined by an Emacs user to stand for another sequence of keys.  For example, if you discover that you are about to type @kbd{C-n M-d C-d} forty times, you can speed your work by defining a keyboard macro to do @kbd{C-n M-d C-d}, and then executing it 39 more times."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:26
msgid "You define a keyboard macro by executing and recording the commands which are its definition.  Put differently, as you define a keyboard macro, the definition is being executed for the first time.  This way, you can see the effects of your commands, so that you don't have to figure them out in your head.  When you close the definition, the keyboard macro is defined and also has been, in effect, executed once.  You can then do the whole thing over again by invoking the macro."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:33
msgid "Keyboard macros differ from ordinary Emacs commands in that they are written in the Emacs command language rather than in Lisp.  This makes it easier for the novice to write them, and makes them more convenient as temporary hacks.  However, the Emacs command language is not powerful enough as a programming language to be useful for writing anything intelligent or general.  For such things, Lisp must be used."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:47
#, no-wrap
msgid "Basic Keyboard Macro"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Defining and running keyboard macros."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:182
#, no-wrap
msgid "Keyboard Macro Ring"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Where previous keyboard macros are saved."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:247
#, no-wrap
msgid "Keyboard Macro Counter"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Inserting incrementing numbers in macros."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:359
#, no-wrap
msgid "Keyboard Macro Query"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Making keyboard macros do different things each time."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:410
#, no-wrap
msgid "Save Keyboard Macro"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Giving keyboard macros names; saving them in files."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:487
#, no-wrap
msgid "Edit Keyboard Macro"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Editing keyboard macros."
msgstr ""

#. type: node
#: src/kmacro.texi:45 src/kmacro.texi:522
#, no-wrap
msgid "Keyboard Macro Step-Edit"
msgstr ""

#. type: menuentry
#: src/kmacro.texi:45
msgid "Interactively executing and editing a keyboard macro."
msgstr ""

#. type: section
#: src/kmacro.texi:48
#, no-wrap
msgid "Basic Use"
msgstr ""

#. type: key{#1}
#: src/kmacro.texi:51 src/kmacro.texi:78 src/kmacro.texi:264
#, no-wrap
msgid "F3"
msgstr ""

#. type: table
#: src/kmacro.texi:54
msgid "Start defining a keyboard macro (@code{kmacro-start-macro-or-insert-counter})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:54 src/kmacro.texi:79
#, no-wrap
msgid "F4"
msgstr ""

#. type: table
#: src/kmacro.texi:58
msgid "If a keyboard macro is being defined, end the definition; otherwise, execute the most recent keyboard macro (@code{kmacro-end-or-call-macro})."
msgstr ""

#. type: item
#: src/kmacro.texi:58
#, no-wrap
msgid "C-u @key{F3}"
msgstr ""

#. type: table
#: src/kmacro.texi:60
msgid "Re-execute last keyboard macro, then append keys to its definition."
msgstr ""

#. type: item
#: src/kmacro.texi:60
#, no-wrap
msgid "C-u C-u @key{F3}"
msgstr ""

#. type: table
#: src/kmacro.texi:62
msgid "Append keys to the last keyboard macro without re-executing it."
msgstr ""

#. type: kindex
#: src/kmacro.texi:62 src/kmacro.texi:151
#, no-wrap
msgid "C-x C-k r"
msgstr ""

#. type: table
#: src/kmacro.texi:65
msgid "Run the last keyboard macro on each line that begins in the region (@code{apply-macro-to-region-lines})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:65 src/kmacro.texi:157
#, no-wrap
msgid "C-x ("
msgstr ""

#. type: table
#: src/kmacro.texi:69
msgid "Start defining a keyboard macro (old style)  (@code{kmacro-start-macro}); with a prefix argument, append keys to the last macro."
msgstr ""

#. type: kindex
#: src/kmacro.texi:69 src/kmacro.texi:158
#, no-wrap
msgid "C-x )"
msgstr ""

#. type: table
#: src/kmacro.texi:72
msgid "End a macro definition (old style) (@code{kmacro-end-macro}); prefix argument serves as the repeat count for executing the macro."
msgstr ""

#. type: kindex
#: src/kmacro.texi:72 src/kmacro.texi:159
#, no-wrap
msgid "C-x e"
msgstr ""

#. type: table
#: src/kmacro.texi:76
msgid "Execute the most recently defined keyboard macro (@code{kmacro-end-and-call-macro}); prefix argument serves as repeat count."
msgstr ""

#. type: findex
#: src/kmacro.texi:80
#, no-wrap
msgid "kmacro-start-macro-or-insert-counter"
msgstr ""

#. type: findex
#: src/kmacro.texi:81
#, no-wrap
msgid "kmacro-end-or-call-macro"
msgstr ""

#. type: findex
#: src/kmacro.texi:82
#, no-wrap
msgid "kmacro-end-and-call-macro"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:89
msgid "To start defining a keyboard macro, type @key{F3}.  From then on, your keys continue to be executed, but also become part of the definition of the macro.  @samp{Def} appears in the mode line to remind you of what is going on.  When you are finished, type @key{F4} (@code{kmacro-end-or-call-macro}) to terminate the definition.  For example,"
msgstr ""

#. type: example
#: src/kmacro.texi:92
#, no-wrap
msgid "@key{F3} M-f foo @key{F4}\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:97
msgid "defines a macro to move forward a word and then insert @samp{foo}.  Note that @key{F3} and @key{F4} do not become part of the macro."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:106
msgid "After defining the macro, you can call it with @key{F4}.  For the above example, this has the same effect as typing @kbd{M-f foo} again.  (Note the two roles of the @key{F4} command: it ends the macro if you are in the process of defining one, or calls the last macro otherwise.)  You can also supply @key{F4} with a numeric prefix argument @samp{n}, which means to invoke the macro @samp{n} times.  An argument of zero repeats the macro indefinitely, until it gets an error or you type @kbd{C-g} (or, on MS-DOS, @kbd{C-@key{BREAK}})."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:112
msgid "The above example demonstrates a handy trick that you can employ with keyboard macros: if you wish to repeat an operation at regularly spaced places in the text, include a motion command as part of the macro.  In this case, repeating the macro inserts the string @samp{foo} after each successive word."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:123
msgid "After terminating the definition of a keyboard macro, you can append more keystrokes to its definition by typing @kbd{C-u @key{F3}}.  This is equivalent to plain @key{F3} followed by retyping the whole definition so far.  As a consequence, it re-executes the macro as previously defined.  If you change the variable @code{kmacro-execute-before-append} to @code{nil}, the existing macro will not be re-executed before appending to it (the default is @code{t}).  You can also add to the end of the definition of the last keyboard macro without re-executing it by typing @kbd{C-u C-u @key{F3}}."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:128
msgid "When a command reads an argument with the minibuffer, your minibuffer input becomes part of the macro along with the command.  So when you replay the macro, the command gets the same argument as when you entered the macro.  For example,"
msgstr ""

#. type: example
#: src/kmacro.texi:131
#, no-wrap
msgid "@key{F3} C-a C-k C-x b foo @key{RET} C-y C-x b @key{RET} @key{F4}\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:136
msgid "defines a macro that kills the current line, yanks it into the buffer @samp{foo}, then returns to the original buffer."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:149
msgid "Most keyboard commands work as usual in a keyboard macro definition, with some exceptions.  Typing @kbd{C-g} (@code{keyboard-quit}) quits the keyboard macro definition.  Typing @kbd{C-M-c} (@code{exit-recursive-edit}) can be unreliable: it works as you'd expect if exiting a recursive edit that started within the macro, but if it exits a recursive edit that started before you invoked the keyboard macro, it also necessarily exits the keyboard macro too.  Mouse events are also unreliable, even though you can use them in a keyboard macro: when the macro replays the mouse event, it uses the original mouse position of that event, the position that the mouse had while you were defining the macro.  The effect of this may be hard to predict."
msgstr ""

#. type: findex
#: src/kmacro.texi:150
#, no-wrap
msgid "apply-macro-to-region-lines"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:156
msgid "The command @kbd{C-x C-k r} (@code{apply-macro-to-region-lines})  repeats the last defined keyboard macro on each line that begins in the region.  It does this line by line, by moving point to the beginning of the line and then executing the macro."
msgstr ""

#. type: findex
#: src/kmacro.texi:160
#, no-wrap
msgid "kmacro-start-macro"
msgstr ""

#. type: findex
#: src/kmacro.texi:161
#, no-wrap
msgid "kmacro-end-macro"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:175
msgid "In addition to the @key{F3} and @key{F4} commands described above, Emacs also supports an older set of key bindings for defining and executing keyboard macros.  To begin a macro definition, type @kbd{C-x (} (@code{kmacro-start-macro}); as with @key{F3}, a prefix argument appends this definition to the last keyboard macro.  To end a macro definition, type @kbd{C-x )} (@code{kmacro-end-macro}).  To execute the most recent macro, type @kbd{C-x e} (@code{kmacro-end-and-call-macro}).  If you enter @kbd{C-x e} while defining a macro, the macro is terminated and executed immediately.  Immediately after typing @kbd{C-x e}, you can type @kbd{e} repeatedly to immediately repeat the macro one or more times.  You can also give @kbd{C-x e} a repeat argument, just like @key{F4} (when it is used to execute a macro)."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:181
msgid "@kbd{C-x )} can be given a repeat count as an argument.  This means to repeat the macro right after defining it.  The macro definition itself counts as the first repetition, since it is executed as you define it, so @kbd{C-u 4 C-x )} executes the macro immediately 3 additional times."
msgstr ""

#. type: section
#: src/kmacro.texi:183
#, no-wrap
msgid "The Keyboard Macro Ring"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:187
msgid "All defined keyboard macros are recorded in the @dfn{keyboard macro ring}.  There is only one keyboard macro ring, shared by all buffers."
msgstr ""

#. type: kindex
#: src/kmacro.texi:189 src/kmacro.texi:215
#, no-wrap
msgid "C-x C-k C-k"
msgstr ""

#. type: table
#: src/kmacro.texi:191
msgid "Execute the keyboard macro at the head of the ring (@code{kmacro-end-or-call-macro-repeat})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:191 src/kmacro.texi:227
#, no-wrap
msgid "C-x C-k C-n"
msgstr ""

#. type: table
#: src/kmacro.texi:194
msgid "Rotate the keyboard macro ring to the next macro (defined earlier)  (@code{kmacro-cycle-ring-next})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:194 src/kmacro.texi:229
#, no-wrap
msgid "C-x C-k C-p"
msgstr ""

#. type: table
#: src/kmacro.texi:197
msgid "Rotate the keyboard macro ring to the previous macro (defined later)  (@code{kmacro-cycle-ring-previous})."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:203
msgid "All commands which operate on the keyboard macro ring use the same @kbd{C-x C-k} prefix.  Most of these commands can be executed and repeated immediately after each other without repeating the @kbd{C-x C-k} prefix.  For example,"
msgstr ""

#. type: example
#: src/kmacro.texi:206
#, no-wrap
msgid "C-x C-k C-p C-p C-k C-k C-k C-n C-n C-k C-p C-k C-d\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:213
msgid "will rotate the keyboard macro ring to the second-previous macro, execute the resulting head macro three times, rotate back to the original head macro, execute that once, rotate to the previous macro, execute that, and finally delete it from the macro ring."
msgstr ""

#. type: findex
#: src/kmacro.texi:214
#, no-wrap
msgid "kmacro-end-or-call-macro-repeat"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:220
msgid "The command @kbd{C-x C-k C-k} (@code{kmacro-end-or-call-macro-repeat})  executes the keyboard macro at the head of the macro ring.  You can repeat the macro immediately by typing another @kbd{C-k}, or you can rotate the macro ring immediately by typing @kbd{C-n} or @kbd{C-p}."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:225
msgid "When a keyboard macro is being defined, @kbd{C-x C-k C-k} behaves like @key{F4} except that, immediately afterward, you can use most key bindings of this section without the @kbd{C-x C-k} prefix.  For instance, another @kbd{C-k} will re-execute the macro."
msgstr ""

#. type: findex
#: src/kmacro.texi:226
#, no-wrap
msgid "kmacro-cycle-ring-next"
msgstr ""

#. type: findex
#: src/kmacro.texi:228
#, no-wrap
msgid "kmacro-cycle-ring-previous"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:238
msgid "The commands @kbd{C-x C-k C-n} (@code{kmacro-cycle-ring-next}) and @kbd{C-x C-k C-p} (@code{kmacro-cycle-ring-previous}) rotate the macro ring, bringing the next or previous keyboard macro to the head of the macro ring.  The definition of the new head macro is displayed in the echo area.  You can continue to rotate the macro ring immediately by repeating just @kbd{C-n} and @kbd{C-p} until the desired macro is at the head of the ring.  To execute the new macro ring head immediately, just type @kbd{C-k}."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:242
msgid "Note that Emacs treats the head of the macro ring as the last defined keyboard macro.  For instance, @key{F4} will execute that macro, and @kbd{C-x C-k n} will give it a name."
msgstr ""

#. type: vindex
#: src/kmacro.texi:243
#, no-wrap
msgid "kmacro-ring-max"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:246
msgid "The maximum number of macros stored in the keyboard macro ring is determined by the customizable variable @code{kmacro-ring-max}."
msgstr ""

#. type: section
#: src/kmacro.texi:248
#, no-wrap
msgid "The Keyboard Macro Counter"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:255
msgid "Each keyboard macro has an associated counter, which is initialized to 0 when you start defining the macro.  This @dfn{current counter} allows you to insert a number into the buffer that depends on the number of times the macro has been called.  The counter is normally incremented each time its value is inserted into the buffer."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:262
msgid "In addition to the current counter, keyboard macros also maintain the @dfn{previous counter}, which records the value the current counter had last time it was incremented or set.  Note that incrementing the current counter by zero, e.g., with @w{@kbd{C-u 0 C-x C-k C-i}}, also records the value of the current counter as the previous counter value."
msgstr ""

#. type: table
#: src/kmacro.texi:267
msgid "In a keyboard macro definition, insert the keyboard macro counter value in the buffer (@code{kmacro-start-macro-or-insert-counter})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:267 src/kmacro.texi:280
#, no-wrap
msgid "C-x C-k C-i"
msgstr ""

#. type: table
#: src/kmacro.texi:270
msgid "Insert the keyboard macro counter value in the buffer (@code{kmacro-insert-counter})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:270 src/kmacro.texi:311
#, no-wrap
msgid "C-x C-k C-c"
msgstr ""

#. type: table
#: src/kmacro.texi:272
msgid "Set the keyboard macro counter (@code{kmacro-set-counter})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:272 src/kmacro.texi:321
#, no-wrap
msgid "C-x C-k C-a"
msgstr ""

#. type: table
#: src/kmacro.texi:274
msgid "Add the prefix arg to the keyboard macro counter (@code{kmacro-add-counter})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:274 src/kmacro.texi:329
#, no-wrap
msgid "C-x C-k C-f"
msgstr ""

#. type: table
#: src/kmacro.texi:277
msgid "Specify the format for inserting the keyboard macro counter (@code{kmacro-set-format})."
msgstr ""

#. type: findex
#: src/kmacro.texi:279
#, no-wrap
msgid "kmacro-insert-counter"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:289
msgid "When you are defining a keyboard macro, the command @key{F3} (@code{kmacro-start-macro-or-insert-counter}) inserts the current value of the keyboard macro's counter into the buffer, and increments the counter by 1.  (If you are not defining a macro, @key{F3} begins a macro definition instead.  @xref{Basic Keyboard Macro}.)  You can use a numeric prefix argument to specify a different increment.  If you just specify a @kbd{C-u} prefix, that inserts the previous counter value, and doesn't change the current value."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:292
msgid "As an example, let us show how the keyboard macro counter can be used to build a numbered list.  Consider the following key sequence:"
msgstr ""

#. type: example
#: src/kmacro.texi:295
#, no-wrap
msgid "@key{F3} C-a @key{F3} . @key{SPC} @key{F4}\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:303
msgid "As part of this keyboard macro definition, the string @samp{0. } was inserted into the beginning of the current line.  If you now move somewhere else in the buffer and type @key{F4} to invoke the macro, the string @samp{1. } is inserted at the beginning of that line.  Subsequent invocations insert @samp{2. }, @samp{3. }, and so forth."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:309
msgid "The command @kbd{C-x C-k C-i} (@code{kmacro-insert-counter}) does the same thing as @key{F3}, but it can be used outside a keyboard macro definition.  When no keyboard macro is being defined or executed, it inserts and increments the counter of the macro at the head of the keyboard macro ring."
msgstr ""

#. type: findex
#: src/kmacro.texi:310
#, no-wrap
msgid "kmacro-set-counter"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:319
msgid "The command @kbd{C-x C-k C-c} (@code{kmacro-set-counter}) sets the current macro counter to the value of the numeric argument.  If you use it inside the macro, it operates on each repetition of the macro.  If you specify just @kbd{C-u} as the prefix, while executing the macro, that resets the counter to the value it had at the beginning of the current repetition of the macro (undoing any increments so far in this repetition)."
msgstr ""

#. type: findex
#: src/kmacro.texi:320
#, no-wrap
msgid "kmacro-add-counter"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:327
msgid "The command @kbd{C-x C-k C-a} (@code{kmacro-add-counter}) adds the prefix argument to the current macro counter.  With just @kbd{C-u} as argument, it resets the counter to the last value inserted by any keyboard macro.  (Normally, when you use this, the last insertion will be in the same macro and it will be the same counter.)"
msgstr ""

#. type: findex
#: src/kmacro.texi:328
#, no-wrap
msgid "kmacro-set-format"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:339
msgid "The command @kbd{C-x C-k C-f} (@code{kmacro-set-format}) prompts for the format to use when inserting the macro counter.  The default format is @samp{%d}, which means to insert the number in decimal without any padding.  You can exit with empty minibuffer to reset the format to this default.  You can specify any format string that the @code{format} function accepts and that makes sense with a single integer extra argument (@pxref{Formatting Strings,,, elisp, The Emacs Lisp Reference Manual}).  Do not put the format string inside double quotes when you insert it in the minibuffer."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:350
msgid "If you use this command while no keyboard macro is being defined or executed, the new format affects all subsequent macro definitions.  Existing macros continue to use the format in effect when they were defined.  If you set the format while defining a keyboard macro, this affects the macro being defined from that point on, but it does not affect subsequent macros.  Execution of the macro will, at each step, use the format in effect at that step during its definition.  Changes to the macro format during execution of a macro, like the corresponding changes during its definition, have no effect on subsequent macros."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:353
msgid "The format set by @kbd{C-x C-k C-f} does not affect insertion of numbers stored in registers."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:358
msgid "If you use a register as a counter, incrementing it on each repetition of the macro, that accomplishes the same thing as a keyboard macro counter.  @xref{Number Registers}.  For most purposes, it is simpler to use a keyboard macro counter."
msgstr ""

#. type: section
#: src/kmacro.texi:360
#, no-wrap
msgid "Executing Macros with Variations"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:365
msgid "In a keyboard macro, you can create an effect similar to that of @code{query-replace}, in that the macro asks you each time around whether to make a change."
msgstr ""

#. type: kindex
#: src/kmacro.texi:367 src/kmacro.texi:372
#, no-wrap
msgid "C-x q"
msgstr ""

#. type: table
#: src/kmacro.texi:370
msgid "When this point is reached during macro execution, ask for confirmation (@code{kbd-macro-query})."
msgstr ""

#. type: findex
#: src/kmacro.texi:373
#, no-wrap
msgid "kbd-macro-query"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:378
msgid "While defining the macro, type @kbd{C-x q} at the point where you want the query to occur.  During macro definition, the @kbd{C-x q} does nothing, but when you run the macro later, @kbd{C-x q} asks you interactively whether to continue."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:380
msgid "The valid responses when @kbd{C-x q} asks are:"
msgstr ""

#. type: item
#: src/kmacro.texi:382
#, no-wrap
msgid "@key{SPC} (or @kbd{y})"
msgstr ""

#. type: table
#: src/kmacro.texi:384
msgid "Continue executing the keyboard macro."
msgstr ""

#. type: item
#: src/kmacro.texi:385
#, no-wrap
msgid "@key{DEL} (or @kbd{n})"
msgstr ""

#. type: table
#: src/kmacro.texi:388
msgid "Skip the remainder of this repetition of the macro, and start right away with the next repetition."
msgstr ""

#. type: item
#: src/kmacro.texi:389
#, no-wrap
msgid "@key{RET} (or @kbd{q})"
msgstr ""

#. type: table
#: src/kmacro.texi:391
msgid "Skip the remainder of this repetition and cancel further repetitions."
msgstr ""

#. type: kbd{#1}
#: src/kmacro.texi:392
#, no-wrap
msgid "C-r"
msgstr ""

#. type: table
#: src/kmacro.texi:399
msgid "Enter a recursive editing level, in which you can perform editing which is not part of the macro.  When you exit the recursive edit using @kbd{C-M-c}, you are asked again how to continue with the keyboard macro.  If you type a @key{SPC} at this time, the rest of the macro definition is executed.  It is up to you to leave point and the text in a state such that the rest of the macro will do what you want."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:409
msgid "@kbd{C-u C-x q}, which is @kbd{C-x q} with a prefix argument, performs a completely different function.  It enters a recursive edit reading input from the keyboard, both when you type it during the definition of the macro, and when it is executed from the macro.  During definition, the editing you do inside the recursive edit does not become part of the macro.  During macro execution, the recursive edit gives you a chance to do some particularized editing on each repetition.  @xref{Recursive Edit}."
msgstr ""

#. type: section
#: src/kmacro.texi:411
#, no-wrap
msgid "Naming and Saving Keyboard Macros"
msgstr ""

#. type: kindex
#: src/kmacro.texi:414 src/kmacro.texi:426
#, no-wrap
msgid "C-x C-k n"
msgstr ""

#. type: table
#: src/kmacro.texi:417
msgid "Give a command name (for the duration of the Emacs session) to the most recently defined keyboard macro (@code{kmacro-name-last-macro})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:417 src/kmacro.texi:441
#, no-wrap
msgid "C-x C-k b"
msgstr ""

#. type: table
#: src/kmacro.texi:420
msgid "Bind the most recently defined keyboard macro to a key sequence (for the duration of the session) (@code{kmacro-bind-to-key})."
msgstr ""

#. type: item
#: src/kmacro.texi:420
#, no-wrap
msgid "M-x insert-kbd-macro"
msgstr ""

#. type: table
#: src/kmacro.texi:422
msgid "Insert in the buffer a keyboard macro's definition, as Lisp code."
msgstr ""

#. type: cindex
#: src/kmacro.texi:424
#, no-wrap
msgid "saving keyboard macros"
msgstr ""

#. type: findex
#: src/kmacro.texi:425
#, no-wrap
msgid "kmacro-name-last-macro"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:438
msgid "If you wish to save a keyboard macro for later use, you can give it a name using @kbd{C-x C-k n} (@code{kmacro-name-last-macro}).  This reads a name as an argument using the minibuffer and defines that name to execute the last keyboard macro, in its current form.  (If you later add to the definition of this macro, that does not alter the name's definition as a macro.)  The macro name is a Lisp symbol, and defining it in this way makes it a valid command name for calling with @kbd{M-x} or for binding a key to with @code{global-set-key} (@pxref{Keymaps}).  If you specify a name that has a prior definition other than a keyboard macro, an error message is shown and nothing is changed."
msgstr ""

#. type: cindex
#: src/kmacro.texi:439
#, no-wrap
msgid "binding keyboard macros"
msgstr ""

#. type: findex
#: src/kmacro.texi:440
#, no-wrap
msgid "kmacro-bind-to-key"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:449
msgid "You can also bind the last keyboard macro (in its current form) to a key, using @kbd{C-x C-k b} (@code{kmacro-bind-to-key}) followed by the key sequence you want to bind.  You can bind to any key sequence in the global keymap, but since most key sequences already have other bindings, you should select the key sequence carefully.  If you try to bind to a key sequence with an existing binding (in any keymap), this command asks you for confirmation before replacing the existing binding."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:456
msgid "To avoid problems caused by overriding existing bindings, the key sequences @kbd{C-x C-k 0} through @kbd{C-x C-k 9} and @kbd{C-x C-k A} through @kbd{C-x C-k Z} are reserved for your own keyboard macro bindings.  In fact, to bind to one of these key sequences, you only need to type the digit or letter rather than the whole key sequences.  For example,"
msgstr ""

#. type: example
#: src/kmacro.texi:459
#, no-wrap
msgid "C-x C-k b 4\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:463
msgid "will bind the last keyboard macro to the key sequence @kbd{C-x C-k 4}."
msgstr ""

#. type: findex
#: src/kmacro.texi:464
#, no-wrap
msgid "insert-kbd-macro"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:468
msgid "Once a macro has a command name, you can save its definition in a file.  Then it can be used in another editing session.  First, visit the file you want to save the definition in.  Then use this command:"
msgstr ""

#. type: example
#: src/kmacro.texi:471
#, no-wrap
msgid "M-x insert-kbd-macro @key{RET} @var{macroname} @key{RET}\n"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:481
msgid "This inserts some Lisp code that, when executed later, will define the same macro with the same definition it has now.  (You don't need to understand Lisp code to do this, because @code{insert-kbd-macro} writes the Lisp code for you.)  Then save the file.  You can load the file later with @code{load-file} (@pxref{Lisp Libraries}).  If the file you save in is your init file @file{~/.emacs} (@pxref{Init File}) then the macro will be defined each time you run Emacs."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:486
msgid "If you give @code{insert-kbd-macro} a prefix argument, it makes additional Lisp code to record the keys (if any) that you have bound to @var{macroname}, so that the macro will be reassigned the same keys when you load the file."
msgstr ""

#. type: section
#: src/kmacro.texi:488
#, no-wrap
msgid "Editing a Keyboard Macro"
msgstr ""

#. type: kindex
#: src/kmacro.texi:491 src/kmacro.texi:501
#, no-wrap
msgid "C-x C-k C-e"
msgstr ""

#. type: table
#: src/kmacro.texi:493
msgid "Edit the last defined keyboard macro (@code{kmacro-edit-macro})."
msgstr ""

#. type: item
#: src/kmacro.texi:493
#, no-wrap
msgid "C-x C-k e @var{name} @key{RET}"
msgstr ""

#. type: table
#: src/kmacro.texi:495
msgid "Edit a previously defined keyboard macro @var{name} (@code{edit-kbd-macro})."
msgstr ""

#. type: kindex
#: src/kmacro.texi:495 src/kmacro.texi:518
#, no-wrap
msgid "C-x C-k l"
msgstr ""

#. type: table
#: src/kmacro.texi:498
msgid "Edit the last 300 keystrokes as a keyboard macro (@code{kmacro-edit-lossage})."
msgstr ""

#. type: findex
#: src/kmacro.texi:500
#, no-wrap
msgid "kmacro-edit-macro"
msgstr ""

#. type: kindex
#: src/kmacro.texi:502
#, no-wrap
msgid "C-x C-k RET"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:509
msgid "You can edit the last keyboard macro by typing @kbd{C-x C-k C-e} or @kbd{C-x C-k @key{RET}} (@code{kmacro-edit-macro}).  This formats the macro definition in a buffer and enters a specialized major mode for editing it.  Type @kbd{C-h m} once in that buffer to display details of how to edit the macro.  When you are finished editing, type @kbd{C-c C-c}."
msgstr ""

#. type: findex
#: src/kmacro.texi:510
#, no-wrap
msgid "edit-kbd-macro"
msgstr ""

#. type: kindex
#: src/kmacro.texi:511
#, no-wrap
msgid "C-x C-k e"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:516
msgid "You can edit a named keyboard macro or a macro bound to a key by typing @kbd{C-x C-k e} (@code{edit-kbd-macro}).  Follow that with the keyboard input that you would use to invoke the macro---@kbd{C-x e} or @kbd{M-x @var{name}} or some other key sequence."
msgstr ""

#. type: findex
#: src/kmacro.texi:517
#, no-wrap
msgid "kmacro-edit-lossage"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:521
msgid "You can edit the last 300 keystrokes as a macro by typing @kbd{C-x C-k l} (@code{kmacro-edit-lossage})."
msgstr ""

#. type: section
#: src/kmacro.texi:523
#, no-wrap
msgid "Stepwise Editing a Keyboard Macro"
msgstr ""

#. type: findex
#: src/kmacro.texi:525
#, no-wrap
msgid "kmacro-step-edit-macro"
msgstr ""

#. type: kindex
#: src/kmacro.texi:526
#, no-wrap
msgid "C-x C-k SPC"
msgstr ""

#. type: Plain text
#: src/kmacro.texi:532
msgid "You can interactively replay and edit the last keyboard macro, one command at a time, by typing @kbd{C-x C-k @key{SPC}} (@code{kmacro-step-edit-macro}).  Unless you quit the macro using @kbd{q} or @kbd{C-g}, the edited macro replaces the last macro on the macro ring."
msgstr ""

#. type: Plain text
#: src/kmacro.texi:537
msgid "This macro editing feature shows the last macro in the minibuffer together with the first (or next) command to be executed, and prompts you for an action.  You can enter @kbd{?} to get a summary of your options.  These actions are available:"
msgstr ""

#. type: itemize
#: src/kmacro.texi:542
msgid "@key{SPC} and @kbd{y} execute the current command, and advance to the next command in the keyboard macro."
msgstr ""

#. type: itemize
#: src/kmacro.texi:544
msgid "@kbd{n}, @kbd{d}, and @key{DEL} skip and delete the current command."
msgstr ""

#. type: itemize
#: src/kmacro.texi:547
msgid "@kbd{f} skips the current command in this execution of the keyboard macro, but doesn't delete it from the macro."
msgstr ""

#. type: itemize
#: src/kmacro.texi:552
msgid "@key{TAB} executes the current command, as well as all similar commands immediately following the current command; for example, @key{TAB} may be used to insert a sequence of characters (corresponding to a sequence of @code{self-insert-command} commands)."
msgstr ""

#. type: itemize
#: src/kmacro.texi:556
msgid "@kbd{c} continues execution (without further editing) until the end of the keyboard macro.  If execution terminates normally, the edited macro replaces the original keyboard macro."
msgstr ""

#. type: itemize
#: src/kmacro.texi:560
msgid "@kbd{C-k} skips and deletes the rest of the keyboard macro, terminates step-editing, and replaces the original keyboard macro with the edited macro."
msgstr ""

#. type: itemize
#: src/kmacro.texi:563
msgid "@kbd{q} and @kbd{C-g} cancels the step-editing of the keyboard macro; discarding any changes made to the keyboard macro."
msgstr ""

#. type: itemize
#: src/kmacro.texi:568
msgid "@kbd{i @var{key}@dots{} C-j} reads and executes a series of key sequences (not including the final @kbd{C-j}), and inserts them before the current command in the keyboard macro, without advancing over the current command."
msgstr ""

#. type: itemize
#: src/kmacro.texi:572
msgid "@kbd{I @var{key}@dots{}} reads one key sequence, executes it, and inserts it before the current command in the keyboard macro, without advancing over the current command."
msgstr ""

#. type: itemize
#: src/kmacro.texi:577
msgid "@kbd{r @var{key}@dots{} C-j} reads and executes a series of key sequences (not including the final @kbd{C-j}), and replaces the current command in the keyboard macro with them, advancing over the inserted key sequences."
msgstr ""

#. type: itemize
#: src/kmacro.texi:581
msgid "@kbd{R @var{key}@dots{}} reads one key sequence, executes it, and replaces the current command in the keyboard macro with that key sequence, advancing over the inserted key sequence."
msgstr ""

#. type: itemize
#: src/kmacro.texi:587
msgid "@kbd{a @var{key}@dots{} C-j} executes the current command, then reads and executes a series of key sequences (not including the final @kbd{C-j}), and inserts them after the current command in the keyboard macro; it then advances over the current command and the inserted key sequences."
msgstr ""

#. type: itemize
#: src/kmacro.texi:593
msgid "@kbd{A @var{key}@dots{} C-j} executes the rest of the commands in the keyboard macro, then reads and executes a series of key sequences (not including the final @kbd{C-j}), and appends them at the end of the keyboard macro; it then terminates the step-editing and replaces the original keyboard macro with the edited macro."
msgstr ""

