msgid ""
msgstr ""
"Project-Id-Version: emacs-manual-chinese\n"
"POT-Creation-Date: 2021-01-06 19:00+0800\n"
"PO-Revision-Date: 2021-01-09 06:14\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: emacs-manual-chinese\n"
"X-Crowdin-Project-ID: 436220\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /27.1/pot/package.texi.pot\n"
"X-Crowdin-File-ID: 318\n"

#. type: node
#: src/package.texi:5
#, no-wrap
msgid "Packages"
msgstr ""

#. type: chapter
#: src/package.texi:6
#, no-wrap
msgid "Emacs Lisp Packages"
msgstr ""

#. type: cindex
#: src/package.texi:7
#, no-wrap
msgid "Package"
msgstr ""

#. type: cindex
#: src/package.texi:8
#, no-wrap
msgid "Package archive"
msgstr ""

#. type: Plain text
#: src/package.texi:20
msgid "Emacs is extended by implementing additional features in @dfn{packages}, which are Emacs Lisp libraries.  These could be written by you or provided by someone else.  If you want to install such a package so it is available in your future Emacs session, you need to compile it and put it in a directory where Emacs looks for Lisp libraries.  @xref{Lisp Libraries}, for more details about this manual installation method.  Many packages provide installation and usage instructions in the large commentary near the beginning of the Lisp file; you can use those instructions for installing and fine-tuning your use of the package."
msgstr ""

#. type: cindex
#: src/package.texi:21
#, no-wrap
msgid "Emacs Lisp package archive"
msgstr ""

#. type: Plain text
#: src/package.texi:28
msgid "Packages can also be provided by @dfn{package archives}, which are large collections of Emacs Lisp packages.  Each package is a separate Emacs Lisp program, sometimes including other components such as an Info manual.  Emacs includes a facility that lets you easily download and install packages from such archives.  The rest of this chapter describes this facility."
msgstr ""

#. type: Plain text
#: src/package.texi:33
msgid "To list the packages available for installation from package archives, type @w{@kbd{M-x list-packages @key{RET}}}.  It brings up a buffer named @file{*Packages*} with a list of all packages.  You can install or uninstall packages via this buffer.  @xref{Package Menu}."
msgstr ""

#. type: Plain text
#: src/package.texi:37
msgid "The command @kbd{C-h P} (@code{describe-package}) prompts for the name of a package, and displays a help buffer describing the attributes of the package and the features that it implements."
msgstr ""

#. type: Plain text
#: src/package.texi:42
msgid "By default, Emacs downloads packages from a package archive maintained by the Emacs developers and hosted by the GNU project.  Optionally, you can also download packages from archives maintained by third parties.  @xref{Package Installation}."
msgstr ""

#. type: Plain text
#: src/package.texi:46
msgid "For information about turning an Emacs Lisp program into an installable package, @xref{Packaging,,,elisp, The Emacs Lisp Reference Manual}."
msgstr ""

#. type: node
#: src/package.texi:52 src/package.texi:54
#, no-wrap
msgid "Package Menu"
msgstr ""

#. type: menuentry
#: src/package.texi:52
msgid "Buffer for viewing and managing packages."
msgstr ""

#. type: section
#: src/package.texi:52 src/package.texi:209 src/package.texi:210
#, no-wrap
msgid "Package Statuses"
msgstr ""

#. type: menuentry
#: src/package.texi:52
msgid "Which statuses a package can have."
msgstr ""

#. type: section
#: src/package.texi:52 src/package.texi:263 src/package.texi:264
#, no-wrap
msgid "Package Installation"
msgstr ""

#. type: menuentry
#: src/package.texi:52
msgid "Options for package installation."
msgstr ""

#. type: node
#: src/package.texi:52 src/package.texi:406
#, no-wrap
msgid "Package Files"
msgstr ""

#. type: menuentry
#: src/package.texi:52
msgid "Where packages are installed."
msgstr ""

#. type: section
#: src/package.texi:55
#, no-wrap
msgid "The Package Menu Buffer"
msgstr ""

#. type: cindex
#: src/package.texi:56
#, no-wrap
msgid "package menu"
msgstr ""

#. type: cindex
#: src/package.texi:57
#, no-wrap
msgid "built-in package"
msgstr ""

#. type: findex
#: src/package.texi:58
#, no-wrap
msgid "list-packages"
msgstr ""

#. type: Plain text
#: src/package.texi:63
msgid "The command @kbd{M-x list-packages} brings up the @dfn{package menu}.  This is a buffer listing all the packages that Emacs knows about, one on each line, with the following information:"
msgstr ""

#. type: itemize
#: src/package.texi:67
msgid "The package name (e.g., @samp{auctex})."
msgstr ""

#. type: itemize
#: src/package.texi:70
msgid "The package's version number (e.g., @samp{11.86})."
msgstr ""

#. type: itemize
#: src/package.texi:77
msgid "The package's status---normally one of @samp{available} (can be downloaded from the package archive), @samp{installed}, or @samp{built-in} (included in Emacs by default).  @xref{Package Statuses}."
msgstr ""

#. type: itemize
#: src/package.texi:81
msgid "Which package archive this package is from, if you have more than one package archive enabled."
msgstr ""

#. type: itemize
#: src/package.texi:84
msgid "A short description of the package."
msgstr ""

#. type: Plain text
#: src/package.texi:91
msgid "The @code{list-packages} command accesses the network, to retrieve the list of available packages from package archive servers.  If the network is unavailable, it falls back on the most recently retrieved list."
msgstr ""

#. type: Plain text
#: src/package.texi:93
msgid "The following commands are available in the package menu:"
msgstr ""

#. type: item
#: src/package.texi:95
#, no-wrap
msgid "h"
msgstr ""

#. type: kindex
#: src/package.texi:96
#, no-wrap
msgid "h @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:97
#, no-wrap
msgid "package-menu-quick-help"
msgstr ""

#. type: table
#: src/package.texi:100
msgid "Print a short message summarizing how to use the package menu (@code{package-menu-quick-help})."
msgstr ""

#. type: item
#: src/package.texi:101
#, no-wrap
msgid "?"
msgstr ""

#. type: key{#1}
#: src/package.texi:102
#, no-wrap
msgid "RET"
msgstr ""

#. type: kindex
#: src/package.texi:103
#, no-wrap
msgid "? @r{(Package Menu)}"
msgstr ""

#. type: kindex
#: src/package.texi:104
#, no-wrap
msgid "RET @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:105
#, no-wrap
msgid "package-menu-describe-package"
msgstr ""

#. type: table
#: src/package.texi:109
msgid "Display a help buffer for the package on the current line (@code{package-menu-describe-package}), similar to the help window displayed by the @kbd{C-h P} command (@pxref{Packages})."
msgstr ""

#. type: item
#: src/package.texi:110
#, no-wrap
msgid "i"
msgstr ""

#. type: kindex
#: src/package.texi:111
#, no-wrap
msgid "i @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:112
#, no-wrap
msgid "package-menu-mark-install"
msgstr ""

#. type: table
#: src/package.texi:118
msgid "Mark the package on the current line for installation (@code{package-menu-mark-install}).  If the package status is @samp{available}, this adds an @samp{I} character to the start of the line; typing @kbd{x} (see below) will download and install the package."
msgstr ""

#. type: item
#: src/package.texi:119
#, no-wrap
msgid "d"
msgstr ""

#. type: kindex
#: src/package.texi:120
#, no-wrap
msgid "d @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:121
#, no-wrap
msgid "package-menu-mark-delete"
msgstr ""

#. type: table
#: src/package.texi:128
msgid "Mark the package on the current line for deletion (@code{package-menu-mark-delete}).  If the package status is @samp{installed}, this adds a @samp{D} character to the start of the line; typing @kbd{x} (see below) will delete the package.  @xref{Package Files}, for information about what package deletion entails."
msgstr ""

#. type: item
#: src/package.texi:129
#, no-wrap
msgid "~"
msgstr ""

#. type: kindex
#: src/package.texi:130
#, no-wrap
msgid "~ @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:131
#, no-wrap
msgid "package-menu-mark-obsolete-for-deletion"
msgstr ""

#. type: table
#: src/package.texi:135
msgid "Mark all obsolete packages for deletion (@code{package-menu-mark-obsolete-for-deletion}).  This marks for deletion all the packages whose status is @samp{obsolete}."
msgstr ""

#. type: item
#: src/package.texi:136
#, no-wrap
msgid "u"
msgstr ""

#. type: key{#1}
#: src/package.texi:137
#, no-wrap
msgid "DEL"
msgstr ""

#. type: kindex
#: src/package.texi:138
#, no-wrap
msgid "u @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:139
#, no-wrap
msgid "package-menu-mark-unmark"
msgstr ""

#. type: table
#: src/package.texi:143
msgid "Remove any installation or deletion mark previously added to the current line by an @kbd{i} or @kbd{d} command (@code{package-menu-mark-unmark})."
msgstr ""

#. type: item
#: src/package.texi:144
#, no-wrap
msgid "U"
msgstr ""

#. type: kindex
#: src/package.texi:145
#, no-wrap
msgid "U @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:146
#, no-wrap
msgid "package-menu-mark-upgrades"
msgstr ""

#. type: table
#: src/package.texi:151
msgid "Mark all package with a newer available version for upgrading (@code{package-menu-mark-upgrades}).  This places an installation mark on the new available versions, and a deletion mark on the old installed versions (marked with status @samp{obsolete})."
msgstr ""

#. type: item
#: src/package.texi:152
#, no-wrap
msgid "x"
msgstr ""

#. type: kindex
#: src/package.texi:153
#, no-wrap
msgid "x @r{(Package Menu)}"
msgstr ""

#. type: vindex
#: src/package.texi:154
#, no-wrap
msgid "package-menu-async"
msgstr ""

#. type: findex
#: src/package.texi:155
#, no-wrap
msgid "package-menu-execute"
msgstr ""

#. type: table
#: src/package.texi:159
msgid "Download and install all packages marked with @kbd{i}, and their dependencies; also, delete all packages marked with @kbd{d} (@code{package-menu-execute}).  This also removes the marks."
msgstr ""

#. type: item
#: src/package.texi:160
#, no-wrap
msgid "g"
msgstr ""

#. type: item
#: src/package.texi:161
#, no-wrap
msgid "r"
msgstr ""

#. type: kindex
#: src/package.texi:162
#, no-wrap
msgid "g @r{(Package Menu)}"
msgstr ""

#. type: kindex
#: src/package.texi:163
#, no-wrap
msgid "r @r{(Package Menu)}"
msgstr ""

#. type: table
#: src/package.texi:167
msgid "Refresh the package list (@code{revert-buffer}).  This fetches the list of available packages from the package archive again, and redisplays the package list."
msgstr ""

#. type: item
#: src/package.texi:168
#, no-wrap
msgid "/ k"
msgstr ""

#. type: kindex
#: src/package.texi:169
#, no-wrap
msgid "/ k @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:170
#, no-wrap
msgid "package-menu-filter-by-keyword"
msgstr ""

#. type: table
#: src/package.texi:175
msgid "Filter the package list by keyword (@code{package-menu-filter-by-keyword}).  This prompts for a keyword (e.g., @samp{games}), then shows only the packages that relate to that keyword."
msgstr ""

#. type: item
#: src/package.texi:176
#, no-wrap
msgid "/ n"
msgstr ""

#. type: kindex
#: src/package.texi:177
#, no-wrap
msgid "/ n @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:178
#, no-wrap
msgid "package-menu-filter-by-name"
msgstr ""

#. type: table
#: src/package.texi:182
msgid "Filter the package list by name (@code{package-menu-filter-by-name}).  This prompts for a string, then shows only the packages whose names match a regexp with that value."
msgstr ""

#. type: item
#: src/package.texi:183
#, no-wrap
msgid "/ /"
msgstr ""

#. type: kindex
#: src/package.texi:184
#, no-wrap
msgid "/ / @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:185
#, no-wrap
msgid "package-menu-clear-filter"
msgstr ""

#. type: table
#: src/package.texi:188
msgid "Clear filter currently applied to the package list (@code{package-menu-clear-filter})."
msgstr ""

#. type: item
#: src/package.texi:189
#, no-wrap
msgid "H"
msgstr ""

#. type: kindex
#: src/package.texi:190
#, no-wrap
msgid "H @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:191
#, no-wrap
msgid "package-menu-hide-package"
msgstr ""

#. type: table
#: src/package.texi:197
msgid "Hide packages whose names match a regexp (@code{package-menu-hide-package}).  This prompts for a regexp, and then hides the packages with matching names.  The default value of the regexp will hide only the package whose name is at point, so just pressing @key{RET} to the prompt will hide the current package."
msgstr ""

#. type: item
#: src/package.texi:198
#, no-wrap
msgid "("
msgstr ""

#. type: kindex
#: src/package.texi:199
#, no-wrap
msgid "( @r{(Package Menu)}"
msgstr ""

#. type: findex
#: src/package.texi:200
#, no-wrap
msgid "package-menu-toggle-hiding"
msgstr ""

#. type: table
#: src/package.texi:203
msgid "Toggle visibility of old versions of packages and also of versions from lower-priority archives (@code{package-menu-toggle-hiding})."
msgstr ""

#. type: Plain text
#: src/package.texi:208
msgid "For example, you can install a package by typing @kbd{i} on the line listing that package, followed by @kbd{x}."
msgstr ""

#. type: cindex
#: src/package.texi:211
#, no-wrap
msgid "package status"
msgstr ""

#. type: Plain text
#: src/package.texi:214
msgid "A package can have one of the following statuses:"
msgstr ""

#. type: item
#: src/package.texi:216
#, no-wrap
msgid "available"
msgstr ""

#. type: table
#: src/package.texi:219
msgid "The package is not installed, but can be downloaded and installed from the package archive."
msgstr ""

#. type: item
#: src/package.texi:220
#, no-wrap
msgid "avail-obso"
msgstr ""

#. type: table
#: src/package.texi:223
msgid "The package is available for installation, but a newer version is also available.  Packages with this status are hidden by default."
msgstr ""

#. type: item
#: src/package.texi:224
#, no-wrap
msgid "built-in"
msgstr ""

#. type: table
#: src/package.texi:227
msgid "The package is included in Emacs by default.  It cannot be deleted through the package menu, and is not considered for upgrading."
msgstr ""

#. type: item
#: src/package.texi:228
#, no-wrap
msgid "dependency"
msgstr ""

#. type: table
#: src/package.texi:231
msgid "The package was installed automatically to satisfy a dependency of another package."
msgstr ""

#. type: item
#: src/package.texi:232
#, no-wrap
msgid "disabled"
msgstr ""

#. type: table
#: src/package.texi:235
msgid "The package has been disabled using the @code{package-load-list} variable."
msgstr ""

#. type: item
#: src/package.texi:236
#, no-wrap
msgid "external"
msgstr ""

#. type: table
#: src/package.texi:240
msgid "The package is not built-in and not from the directory specified by @code{package-user-dir} (@pxref{Package Files}).  External packages are treated much like @samp{built-in} packages and cannot be deleted."
msgstr ""

#. type: item
#: src/package.texi:241
#, no-wrap
msgid "held"
msgstr ""

#. type: table
#: src/package.texi:243
msgid "The package is held, @xref{Package Installation}."
msgstr ""

#. type: item
#: src/package.texi:244
#, no-wrap
msgid "incompat"
msgstr ""

#. type: table
#: src/package.texi:247
msgid "The package cannot be installed for some reason, for example because it depends on uninstallable packages."
msgstr ""

#. type: item
#: src/package.texi:248
#, no-wrap
msgid "installed"
msgstr ""

#. type: table
#: src/package.texi:250
msgid "The package is installed."
msgstr ""

#. type: item
#: src/package.texi:251
#, no-wrap
msgid "new"
msgstr ""

#. type: table
#: src/package.texi:255
msgid "Equivalent to @samp{available}, except that the package became newly available on the package archive after your last invocation of @kbd{M-x list-packages}."
msgstr ""

#. type: item
#: src/package.texi:256
#, no-wrap
msgid "obsolete"
msgstr ""

#. type: table
#: src/package.texi:259
msgid "The package is an outdated installed version; in addition to this version of the package, a newer version is also installed."
msgstr ""

#. type: findex
#: src/package.texi:266
#, no-wrap
msgid "package-install"
msgstr ""

#. type: Plain text
#: src/package.texi:271
msgid "Packages are most conveniently installed using the package menu (@pxref{Package Menu}), but you can also use the command @kbd{M-x package-install}.  This prompts for the name of a package with the @samp{available} status, then downloads and installs it."
msgstr ""

#. type: cindex
#: src/package.texi:272
#, no-wrap
msgid "package requirements"
msgstr ""

#. type: Plain text
#: src/package.texi:280
msgid "A package may @dfn{require} certain other packages to be installed, because it relies on functionality provided by them.  When Emacs installs such a package, it also automatically downloads and installs any required package that is not already installed.  (If a required package is somehow unavailable, Emacs signals an error and stops installation.)  A package's requirements list is shown in its help buffer."
msgstr ""

#. type: vindex
#: src/package.texi:281
#, no-wrap
msgid "package-archives"
msgstr ""

#. type: Plain text
#: src/package.texi:291
msgid "By default, packages are downloaded from a single package archive maintained by the Emacs developers.  This is controlled by the variable @code{package-archives}, whose value is a list of package archives known to Emacs.  Each list element must have the form @code{(@var{id} . @var{location})}, where @var{id} is the name of a package archive and @var{location} is the @acronym{URL} or name of the package archive directory.  You can alter this list if you wish to use third party package archives---but do so at your own risk, and use only third parties that you think you can trust!"
msgstr ""

#. type: anchor{#1}
#: src/package.texi:293
msgid "Package Signing"
msgstr ""

#. type: cindex
#: src/package.texi:293
#, no-wrap
msgid "package security"
msgstr ""

#. type: cindex
#: src/package.texi:294
#, no-wrap
msgid "package signing"
msgstr ""

#. type: Plain text
#: src/package.texi:317
msgid "The maintainers of package archives can increase the trust that you can have in their packages by @dfn{signing} them.  They generate a private/public pair of cryptographic keys, and use the private key to create a @dfn{signature file} for each package.  With the public key, you can use the signature files to verify the package creator and make sure the package has not been tampered with.  Signature verification uses @uref{https://www.gnupg.org/, the GnuPG package} via the EasyPG interface (@pxref{Top,, EasyPG, epa, Emacs EasyPG Assistant Manual}).  A valid signature is not a cast-iron guarantee that a package is not malicious, so you should still exercise caution.  Package archives should provide instructions on how you can obtain their public key.  One way is to download the key from a server such as @url{https://pgp.mit.edu/}.  Use @kbd{M-x package-import-keyring} to import the key into Emacs.  Emacs stores package keys in the directory specified by the variable @code{package-gnupghome-dir}, by default in the @file{gnupg} subdirectory of @code{package-user-dir}, which causes Emacs to invoke GnuPG with the option @samp{--homedir} when verifying signatures.  If @code{package-gnupghome-dir} is @code{nil}, GnuPG's option @samp{--homedir} is omitted.  The public key for the GNU package archive is distributed with Emacs, in the @file{etc/package-keyring.gpg}.  Emacs uses it automatically."
msgstr ""

#. type: vindex
#: src/package.texi:318
#, no-wrap
msgid "package-check-signature"
msgstr ""

#. type: vindex
#: src/package.texi:319
#, no-wrap
msgid "package-unsigned-archives"
msgstr ""

#. type: Plain text
#: src/package.texi:331
msgid "If the user option @code{package-check-signature} is non-@code{nil}, Emacs attempts to verify signatures when you install packages.  If the option has the value @code{allow-unsigned}, and a usable OpenPGP configuration is found, signed packages will be checked, but you can still install a package that is not signed.  If you use some archives that do not sign their packages, you can add them to the list @code{package-unsigned-archives}.  (If the value is @code{allow-unsigned} and no usable OpenPGP is found, this option is treated as if its value was @code{nil}.)  If the value is @code{t}, at least one signature must be valid; if the value is @code{all}, all of them must be valid."
msgstr ""

#. type: Plain text
#: src/package.texi:336
msgid "For more information on cryptographic keys and signing, @pxref{Top,, GnuPG, gnupg, The GNU Privacy Guard Manual}.  Emacs comes with an interface to GNU Privacy Guard, @pxref{Top,, EasyPG, epa, Emacs EasyPG Assistant Manual}."
msgstr ""

#. type: vindex
#: src/package.texi:337
#, no-wrap
msgid "package-pinned-packages"
msgstr ""

#. type: Plain text
#: src/package.texi:343
msgid "If you have more than one package archive enabled, and some of them offer different versions of the same package, you may find the option @code{package-pinned-packages} useful.  You can add package/archive pairs to this list, to ensure that the specified package is only ever downloaded from the specified archive."
msgstr ""

#. type: vindex
#: src/package.texi:344
#, no-wrap
msgid "package-archive-priorities"
msgstr ""

#. type: vindex
#: src/package.texi:345
#, no-wrap
msgid "package-menu-hide-low-priority"
msgstr ""

#. type: Plain text
#: src/package.texi:354
msgid "Another option that is useful when you have several package archives enabled is @code{package-archive-priorities}.  It specifies the priority of each archive (higher numbers specify higher priority archives).  By default, archives have the priority of zero, unless specified otherwise by this option's value.  Packages from lower-priority archives will not be shown in the menu, if the same package is available from a higher-priority archive.  (This is controlled by the value of @code{package-menu-hide-low-priority}.)"
msgstr ""

#. type: Plain text
#: src/package.texi:362
msgid "Once a package is downloaded and installed, it is made available to the current Emacs session.  Making a package available adds its directory to @code{load-path} and loads its autoloads.  The effect of a package's autoloads varies from package to package.  Most packages just make some new commands available, while others have more wide-ranging effects on the Emacs session.  For such information, consult the package's help buffer."
msgstr ""

#. type: Plain text
#: src/package.texi:369
msgid "After a package is installed, it is automatically made available by Emacs in all subsequent sessions.  This happens at startup, before processing the init file but after processing the early init file (@pxref{Early Init File}).  As an exception, Emacs does not make packages available at startup if invoked with the @samp{-q} or @samp{--no-init-file} options (@pxref{Initial Options})."
msgstr ""

#. type: vindex
#: src/package.texi:370
#, no-wrap
msgid "package-enable-at-startup"
msgstr ""

#. type: Plain text
#: src/package.texi:376
msgid "To keep Emacs from automatically making packages available at startup, change the variable @code{package-enable-at-startup} to @code{nil}.  You must do this in the early init file, as the variable is read before loading the regular init file.  Currently this variable cannot be set via Customize."
msgstr ""

#. type: findex
#: src/package.texi:377
#, no-wrap
msgid "package-activate-all"
msgstr ""

#. type: Plain text
#: src/package.texi:384
msgid "If you have set @code{package-enable-at-startup} to @code{nil}, you can still make packages available either during or after startup.  To make installed packages available during startup, call the function @code{package-activate-all} in your init file.  To make installed packages available after startup, invoke the command @kbd{M-: (package-activate-all) RET}."
msgstr ""

#. type: vindex
#: src/package.texi:385
#, no-wrap
msgid "package-load-list"
msgstr ""

#. type: Plain text
#: src/package.texi:398
msgid "For finer control over which packages are made available at startup, you can use the variable @code{package-load-list}.  Its value should be a list.  A list element of the form @w{@code{(@var{name} @var{version})}} tells Emacs to make available version @var{version} of the package named @var{name}.  Here, @var{version} should be a version string (corresponding to a specific version of the package), or @code{t} (which means to make available any installed version), or @code{nil} (which means no version; this disables the package, preventing it from being made available).  A list element can also be the symbol @code{all}, which means to make available the latest installed version of any package not named by the other list elements.  The default value is just @code{'(all)}."
msgstr ""

#. type: Plain text
#: src/package.texi:405
msgid "For example, if you set @code{package-load-list} to @w{@code{'((muse \"3.20\") all)}}, then Emacs only makes available version 3.20 of the @samp{muse} package, plus any installed version of packages other than @samp{muse}.  Any other version of @samp{muse} that happens to be installed will be ignored.  The @samp{muse} package will be listed in the package menu with the @samp{held} status."
msgstr ""

#. type: section
#: src/package.texi:407
#, no-wrap
msgid "Package Files and Directory Layout"
msgstr ""

#. type: cindex
#: src/package.texi:408
#, no-wrap
msgid "package directory"
msgstr ""

#. type: cindex
#: src/package.texi:410
#, no-wrap
msgid "package file"
msgstr ""

#. type: findex
#: src/package.texi:411
#, no-wrap
msgid "package-install-file"
msgstr ""

#. type: Plain text
#: src/package.texi:421
msgid "Each package is downloaded from the package archive in the form of a single @dfn{package file}---either an Emacs Lisp source file, or a tar file containing multiple Emacs Lisp source and other files.  Package files are automatically retrieved, processed, and disposed of by the Emacs commands that install packages.  Normally, you will not need to deal directly with them, unless you are making a package (@pxref{Packaging,,,elisp, The Emacs Lisp Reference Manual}).  Should you ever need to install a package directly from a package file, use the command @kbd{M-x package-install-file}."
msgstr ""

#. type: vindex
#: src/package.texi:422
#, no-wrap
msgid "package-user-dir"
msgstr ""

#. type: Plain text
#: src/package.texi:429
msgid "Once installed, the contents of a package are placed in a subdirectory of @file{~/.emacs.d/elpa/} (you can change the name of that directory by changing the variable @code{package-user-dir}).  The package subdirectory is named @file{@var{name}-@var{version}}, where @var{name} is the package name and @var{version} is its version string."
msgstr ""

#. type: cindex
#: src/package.texi:430
#, no-wrap
msgid "system-wide packages"
msgstr ""

#. type: vindex
#: src/package.texi:431
#, no-wrap
msgid "package-directory-list"
msgstr ""

#. type: Plain text
#: src/package.texi:438
msgid "In addition to @code{package-user-dir}, Emacs looks for installed packages in the directories listed in @code{package-directory-list}.  These directories are meant for system administrators to make Emacs packages available system-wide; Emacs itself never installs packages there.  The package subdirectories for @code{package-directory-list} are laid out in the same way as in @code{package-user-dir}."
msgstr ""

#. type: Plain text
#: src/package.texi:442
msgid "Deleting a package (@pxref{Package Menu}) involves deleting the corresponding package subdirectory.  This only works for packages installed in @code{package-user-dir}; if told to act on a package in a system-wide package directory, the deletion command signals an error."
msgstr ""

