msgid ""
msgstr ""
"Project-Id-Version: emacs-manual-chinese\n"
"POT-Creation-Date: 2021-01-06 19:00+0800\n"
"PO-Revision-Date: 2021-01-11 06:00\n"
"Last-Translator: \n"
"Language-Team: Chinese Simplified\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: emacs-manual-chinese\n"
"X-Crowdin-Project-ID: 436220\n"
"X-Crowdin-Language: zh-CN\n"
"X-Crowdin-File: /27.1/pot/building.texi.pot\n"
"X-Crowdin-File-ID: 248\n"

#. type: node
#: src/building.texi:5
#, no-wrap
msgid "Building"
msgstr ""

#. type: chapter
#: src/building.texi:6
#, no-wrap
msgid "Compiling and Testing Programs"
msgstr ""

#. type: cindex
#: src/building.texi:7
#, no-wrap
msgid "building programs"
msgstr ""

#. type: cindex
#: src/building.texi:8
#, no-wrap
msgid "program building"
msgstr ""

#. type: cindex
#: src/building.texi:9
#, no-wrap
msgid "running Lisp functions"
msgstr ""

#. type: Plain text
#: src/building.texi:14
msgid "The previous chapter discusses the Emacs commands that are useful for making changes in programs.  This chapter deals with commands that assist in the process of compiling and testing programs."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:33
#, no-wrap
msgid "Compilation"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Compiling programs in languages other than Lisp (C, Pascal, etc.)."
msgstr ""

#. type: section
#: src/building.texi:31 src/building.texi:141 src/building.texi:142
#, no-wrap
msgid "Compilation Mode"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "The mode for visiting compiler errors."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:313
#, no-wrap
msgid "Compilation Shell"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Customizing your shell properly for use in the compilation buffer."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:380
#, no-wrap
msgid "Grep Searching"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Searching with grep."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:492
#, no-wrap
msgid "Flymake"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Finding syntax errors on the fly."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:522
#, no-wrap
msgid "Debuggers"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Running symbolic debuggers for non-Lisp programs."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:1398
#, no-wrap
msgid "Executing Lisp"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Various modes for editing Lisp programs, with different facilities for running the Lisp programs."
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Libraries: Lisp Libraries"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "How Lisp programs are loaded into Emacs."
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Eval: Lisp Eval"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Executing a single Lisp expression in Emacs."
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Interaction: Lisp Interaction"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Executing Lisp in an Emacs buffer."
msgstr ""

#. type: node
#: src/building.texi:31 src/building.texi:1718
#, no-wrap
msgid "External Lisp"
msgstr ""

#. type: menuentry
#: src/building.texi:31
msgid "Communicating through Emacs with a separate Lisp."
msgstr ""

#. type: section
#: src/building.texi:34
#, no-wrap
msgid "Running Compilations under Emacs"
msgstr ""

#. type: cindex
#: src/building.texi:35
#, no-wrap
msgid "inferior process"
msgstr ""

#. type: cindex
#: src/building.texi:36
#, no-wrap
msgid "make"
msgstr ""

#. type: cindex
#: src/building.texi:37
#, no-wrap
msgid "compilation errors"
msgstr ""

#. type: cindex
#: src/building.texi:38
#, no-wrap
msgid "error log"
msgstr ""

#. type: Plain text
#: src/building.texi:43
msgid "Emacs can run compilers for languages such as C and Fortran, feeding the compilation log into an Emacs buffer.  It can also parse the error messages and show you where the errors occurred."
msgstr ""

#. type: item
#: src/building.texi:45
#, no-wrap
msgid "M-x compile"
msgstr ""

#. type: table
#: src/building.texi:48
msgid "Run a compiler asynchronously under Emacs, with error messages going to the @file{*compilation*} buffer."
msgstr ""

#. type: item
#: src/building.texi:49
#, no-wrap
msgid "M-x recompile"
msgstr ""

#. type: itemx
#: src/building.texi:50
#, no-wrap
msgid "g@r{ (Compilation mode)}"
msgstr ""

#. type: table
#: src/building.texi:53
msgid "Invoke a compiler with the same command as in the last invocation of @kbd{M-x compile}."
msgstr ""

#. type: item
#: src/building.texi:54
#, no-wrap
msgid "M-x kill-compilation"
msgstr ""

#. type: table
#: src/building.texi:56
msgid "Kill the running compilation subprocess."
msgstr ""

#. type: findex
#: src/building.texi:58
#, no-wrap
msgid "compile"
msgstr ""

#. type: Plain text
#: src/building.texi:66
msgid "To run @code{make} or another compilation command, type @kbd{M-x compile}.  This reads a shell command line using the minibuffer, and then executes the command by running a shell as a subprocess (or @dfn{inferior process}) of Emacs.  The output is inserted in a buffer named @file{*compilation*}.  The current buffer's default directory is used as the working directory for the execution of the command, so by default compilation takes place in that directory."
msgstr ""

#. type: vindex
#: src/building.texi:67
#, no-wrap
msgid "compile-command"
msgstr ""

#. type: Plain text
#: src/building.texi:77
msgid "The default compilation command is @samp{make -k}, which is usually correct for programs compiled using the @command{make} utility (the @samp{-k} flag tells @command{make} to continue compiling as much as possible after an error).  @xref{Top,, Make, make, GNU Make Manual}.  If you have done @kbd{M-x compile} before, the command that you specified is automatically stored in the variable @code{compile-command}; this is used as the default the next time you type @kbd{M-x compile}.  A file can also specify a file-local value for @code{compile-command} (@pxref{File Variables})."
msgstr ""

#. type: Plain text
#: src/building.texi:88
msgid "Starting a compilation displays the @file{*compilation*} buffer in another window but does not select it.  While the compilation is running, the word @samp{run} is shown in the major mode indicator for the @file{*compilation*} buffer, and the word @samp{Compiling} appears in all mode lines.  You do not have to keep the @file{*compilation*} buffer visible while compilation is running; it continues in any case.  When the compilation ends, for whatever reason, the mode line of the @file{*compilation*} buffer changes to say @samp{exit} (followed by the exit code: @samp{[0]} for a normal exit), or @samp{signal} (if a signal terminated the process)."
msgstr ""

#. type: Plain text
#: src/building.texi:95
msgid "If you want to watch the compilation transcript as it appears, switch to the @file{*compilation*} buffer and move point to the end of the buffer.  When point is at the end, new compilation output is inserted above point, which remains at the end.  Otherwise, point remains fixed while compilation output is added at the end of the buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:99
msgid "While compilation proceeds, the mode line shows the number of errors, warnings, and informational messages emitted by the compiler so far."
msgstr ""

#. type: cindex
#: src/building.texi:100
#, no-wrap
msgid "compilation buffer, keeping point at end"
msgstr ""

#. type: vindex
#: src/building.texi:101
#, no-wrap
msgid "compilation-scroll-output"
msgstr ""

#. type: Plain text
#: src/building.texi:108
msgid "If you change the variable @code{compilation-scroll-output} to a non-@code{nil} value, the @file{*compilation*} buffer scrolls automatically to follow the output.  If the value is @code{first-error}, scrolling stops when the first error appears, leaving point at that error.  For any other non-@code{nil} value, scrolling continues until there is no more output."
msgstr ""

#. type: findex
#: src/building.texi:109
#, no-wrap
msgid "recompile"
msgstr ""

#. type: Plain text
#: src/building.texi:117
msgid "To rerun the last compilation with the same command, type @kbd{M-x recompile}.  This reuses the compilation command from the last invocation of @kbd{M-x compile}.  It also reuses the @file{*compilation*} buffer and starts the compilation in its default directory, which is the directory in which the previous compilation was started.  In @file{*compilation*} buffers this command is bound to @kbd{g}."
msgstr ""

#. type: findex
#: src/building.texi:118
#, no-wrap
msgid "kill-compilation"
msgstr ""

#. type: vindex
#: src/building.texi:119
#, no-wrap
msgid "compilation-always-kill"
msgstr ""

#. type: Plain text
#: src/building.texi:128
msgid "Starting a new compilation also kills any compilation already running in @file{*compilation*}, as the buffer can only handle one compilation at any time.  However, @kbd{M-x compile} and @kbd{M-x recompile} ask for confirmation before actually killing a compilation that is running; to always automatically kill the compilation without asking, change the variable @code{compilation-always-kill} to @code{t}.  You can also kill a compilation process with the command @kbd{M-x kill-compilation}."
msgstr ""

#. type: Plain text
#: src/building.texi:133
msgid "To run two compilations at once, start the first one, then rename the @file{*compilation*} buffer (perhaps using @code{rename-uniquely}; @pxref{Misc Buffer}), then switch buffers and start the other compilation.  This will create a new @file{*compilation*} buffer."
msgstr ""

#. type: vindex
#: src/building.texi:134
#, no-wrap
msgid "compilation-environment"
msgstr ""

#. type: Plain text
#: src/building.texi:140
msgid "You can control the environment passed to the compilation command with the variable @code{compilation-environment}.  Its value is a list of environment variable settings; each element should be a string of the form @code{\"@var{envvarname}=@var{value}\"}.  These environment variable settings override the usual ones."
msgstr ""

#. type: cindex
#: src/building.texi:144
#, no-wrap
msgid "Compilation mode"
msgstr ""

#. type: cindex
#: src/building.texi:145
#, no-wrap
msgid "mode, Compilation"
msgstr ""

#. type: cindex
#: src/building.texi:146
#, no-wrap
msgid "locus"
msgstr ""

#. type: Plain text
#: src/building.texi:153
msgid "The @file{*compilation*} buffer uses a major mode called Compilation mode.  Compilation mode turns each error message in the buffer into a hyperlink; you can move point to it and type @key{RET}, or click on it with the mouse (@pxref{Mouse References}), to visit the @dfn{locus} of the error message in a separate window.  The locus is the specific position in a file where that error occurred."
msgstr ""

#. type: cindex
#: src/building.texi:154
#, no-wrap
msgid "compilation mode faces"
msgstr ""

#. type: vindex
#: src/building.texi:155
#, no-wrap
msgid "compilation-error"
msgstr ""

#. type: vindex
#: src/building.texi:156
#, no-wrap
msgid "compilation-warning"
msgstr ""

#. type: Plain text
#: src/building.texi:164
msgid "The appearance of the @file{*compilation*} buffer can be controlled by customizing the faces which are used to highlight parts of the @file{*compilation*} buffer, e.g., @code{compilation-error} or @code{compilation-warning}, for error and warning messages respectively.  Note that since those faces inherit from the @code{error} and @code{warning} faces, it is also possible to customize the parent face directly instead."
msgstr ""

#. type: Plain text
#: src/building.texi:167
msgid "Use @w{@kbd{M-x customize-group RET compilation}} to see the entire list of customization variables and faces."
msgstr ""

#. type: findex
#: src/building.texi:168
#, no-wrap
msgid "compile-goto-error"
msgstr ""

#. type: vindex
#: src/building.texi:169
#, no-wrap
msgid "compilation-auto-jump-to-first-error"
msgstr ""

#. type: Plain text
#: src/building.texi:174
msgid "If you change the variable @code{compilation-auto-jump-to-first-error} to a non-@code{nil} value, Emacs automatically visits the locus of the first error message that appears in the @file{*compilation*} buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:179
msgid "Compilation mode provides the following additional commands.  These commands can also be used in @file{*grep*} buffers, where the hyperlinks are search matches rather than error messages (@pxref{Grep Searching})."
msgstr ""

#. type: kindex
#: src/building.texi:181 src/building.texi:212
#, no-wrap
msgid "M-g M-n"
msgstr ""

#. type: kindex
#: src/building.texi:182 src/building.texi:213
#, no-wrap
msgid "M-g n"
msgstr ""

#. type: kindex
#: src/building.texi:183 src/building.texi:214
#, no-wrap
msgid "C-x `"
msgstr ""

#. type: table
#: src/building.texi:185
msgid "Visit the locus of the next error message or match (@code{next-error})."
msgstr ""

#. type: item
#: src/building.texi:185
#, no-wrap
msgid "M-g M-p"
msgstr ""

#. type: itemx
#: src/building.texi:186
#, no-wrap
msgid "M-g p"
msgstr ""

#. type: table
#: src/building.texi:189
msgid "Visit the locus of the previous error message or match (@code{previous-error})."
msgstr ""

#. type: item
#: src/building.texi:189
#, no-wrap
msgid "M-n"
msgstr ""

#. type: table
#: src/building.texi:192
msgid "Move point to the next error message or match, without visiting its locus (@code{compilation-next-error})."
msgstr ""

#. type: item
#: src/building.texi:192
#, no-wrap
msgid "M-p"
msgstr ""

#. type: table
#: src/building.texi:195
msgid "Move point to the previous error message or match, without visiting its locus (@code{compilation-previous-error})."
msgstr ""

#. type: item
#: src/building.texi:195
#, no-wrap
msgid "M-@}"
msgstr ""

#. type: table
#: src/building.texi:198
msgid "Move point to the next error message or match occurring in a different file (@code{compilation-next-file})."
msgstr ""

#. type: item
#: src/building.texi:198
#, no-wrap
msgid "M-@{"
msgstr ""

#. type: table
#: src/building.texi:201
msgid "Move point to the previous error message or match occurring in a different file (@code{compilation-previous-file})."
msgstr ""

#. type: item
#: src/building.texi:201 src/building.texi:807
#, no-wrap
msgid "C-c C-f"
msgstr ""

#. type: table
#: src/building.texi:204
msgid "Toggle Next Error Follow minor mode, which makes cursor motion in the compilation buffer produce automatic source display."
msgstr ""

#. type: item
#: src/building.texi:204
#, no-wrap
msgid "g"
msgstr ""

#. type: table
#: src/building.texi:207
msgid "Re-run the last command whose output is shown in the @file{*compilation*} buffer."
msgstr ""

#. type: item
#: src/building.texi:207
#, no-wrap
msgid "M-x next-error-select-buffer"
msgstr ""

#. type: table
#: src/building.texi:210
msgid "Select a buffer to be used by next invocation of @code{next-error} and @code{previous-error}."
msgstr ""

#. type: findex
#: src/building.texi:215
#, no-wrap
msgid "next-error"
msgstr ""

#. type: vindex
#: src/building.texi:216
#, no-wrap
msgid "next-error-highlight"
msgstr ""

#. type: vindex
#: src/building.texi:217
#, no-wrap
msgid "next-error-highlight-no-select"
msgstr ""

#. type: Plain text
#: src/building.texi:229
msgid "To visit errors sequentially, type @w{@kbd{C-x `}} (@code{next-error}), or equivalently @kbd{M-g M-n} or @kbd{M-g n}.  This command can be invoked from any buffer, not just a Compilation mode buffer.  The first time you invoke it after a compilation, it visits the locus of the first error message.  Each subsequent @w{@kbd{M-g M-n}} visits the next error, in a similar fashion.  If you visit a specific error with @key{RET} or a mouse click in the @file{*compilation*} buffer, subsequent @w{@kbd{M-g M-n}} commands advance from there.  When @w{@kbd{M-g M-n}} finds no more error messages to visit, it signals an error.  @w{@kbd{C-u M-g M-n}} starts again from the beginning of the compilation buffer, and visits the first locus."
msgstr ""

#. type: Plain text
#: src/building.texi:232
msgid "@kbd{M-g M-p} or @kbd{M-g p} (@code{previous-error}) iterates through errors in the opposite direction."
msgstr ""

#. type: vindex
#: src/building.texi:233
#, no-wrap
msgid "next-error-find-buffer-function"
msgstr ""

#. type: findex
#: src/building.texi:234
#, no-wrap
msgid "next-error-select-buffer"
msgstr ""

#. type: Plain text
#: src/building.texi:251
msgid "The @code{next-error} and @code{previous-error} commands don't just act on the errors or matches listed in @file{*compilation*} and @file{*grep*} buffers; they also know how to iterate through error or match lists produced by other commands, such as @kbd{M-x occur} (@pxref{Other Repeating Search}).  If the current buffer contains error messages or matches, these commands will iterate through them; otherwise, Emacs looks for a buffer containing error messages or matches amongst the windows of the selected frame (if the variable @code{next-error-find-buffer-function} is customized to the value @code{next-error-buffer-on-selected-frame}), then for a buffer used previously by @code{next-error} or @code{previous-error}, and finally all other buffers.  Any buffer these commands iterate through that is not currently displayed in a window will be displayed.  You can use the @command{next-error-select-buffer} command to switch to a different buffer to be used by the subsequent invocation of @code{next-error}."
msgstr ""

#. type: vindex
#: src/building.texi:252
#, no-wrap
msgid "compilation-skip-threshold"
msgstr ""

#. type: Plain text
#: src/building.texi:259
msgid "By default, the @code{next-error} and @code{previous-error} commands skip less important messages.  The variable @code{compilation-skip-threshold} controls this.  The default value, 1, means to skip anything less important than a warning.  A value of 2 means to skip anything less important than an error, while 0 means not to skip any messages."
msgstr ""

#. type: Plain text
#: src/building.texi:265
msgid "When Emacs visits the locus of an error message, it momentarily highlights the relevant source line.  The duration of this highlight is determined by the variable @code{next-error-highlight} for the locus in the selected buffer, and @code{next-error-highlight-no-select} for the locus in non-selected buffers."
msgstr ""

#. type: vindex
#: src/building.texi:266
#, no-wrap
msgid "compilation-context-lines"
msgstr ""

#. type: Plain text
#: src/building.texi:278
msgid "If the @file{*compilation*} buffer is shown in a window with a left fringe (@pxref{Fringes}), the locus-visiting commands put an arrow in the fringe, pointing to the current error message.  If the window has no left fringe, such as on a text terminal, these commands scroll the window so that the current message is at the top of the window.  If you change the variable @code{compilation-context-lines} to @code{t}, a visible arrow is inserted before column zero instead.  If you change the variable to an integer value @var{n}, these commands scroll the window so that the current error message is @var{n} lines from the top, whether or not there is a fringe; the default value, @code{nil}, gives the behavior described above."
msgstr ""

#. type: vindex
#: src/building.texi:279
#, no-wrap
msgid "compilation-error-regexp-alist"
msgstr ""

#. type: vindex
#: src/building.texi:280
#, no-wrap
msgid "grep-regexp-alist"
msgstr ""

#. type: Plain text
#: src/building.texi:286
msgid "To parse messages from the compiler, Compilation mode uses the variable @code{compilation-error-regexp-alist} which lists various error message formats and tells Emacs how to extract the locus from each.  A similar variable, @code{grep-regexp-alist}, tells Emacs how to parse output from a @code{grep} command (@pxref{Grep Searching})."
msgstr ""

#. type: findex
#: src/building.texi:287
#, no-wrap
msgid "compilation-next-error"
msgstr ""

#. type: findex
#: src/building.texi:288
#, no-wrap
msgid "compilation-previous-error"
msgstr ""

#. type: findex
#: src/building.texi:289
#, no-wrap
msgid "compilation-next-file"
msgstr ""

#. type: findex
#: src/building.texi:290
#, no-wrap
msgid "compilation-previous-file"
msgstr ""

#. type: Plain text
#: src/building.texi:297
msgid "Compilation mode also defines the keys @key{SPC} and @key{DEL} to scroll by screenfuls; @kbd{M-n} (@code{compilation-next-error}) and @kbd{M-p} (@code{compilation-previous-error}) to move to the next or previous error message; and @kbd{M-@{} (@code{compilation-next-file})  and @kbd{M-@}} (@code{compilation-previous-file}) to move to the next or previous error message for a different source file."
msgstr ""

#. type: cindex
#: src/building.texi:298
#, no-wrap
msgid "Next Error Follow mode"
msgstr ""

#. type: findex
#: src/building.texi:299
#, no-wrap
msgid "next-error-follow-minor-mode"
msgstr ""

#. type: Plain text
#: src/building.texi:304
msgid "You can type @kbd{C-c C-f} to toggle Next Error Follow mode.  In this minor mode, ordinary cursor motion in the compilation buffer automatically updates the source buffer, i.e., moving the cursor over an error message causes the locus of that error to be displayed."
msgstr ""

#. type: Plain text
#: src/building.texi:312
msgid "The features of Compilation mode are also available in a minor mode called Compilation Minor mode.  This lets you parse error messages in any buffer, not just a normal compilation output buffer.  Type @kbd{M-x compilation-minor-mode} to enable the minor mode.  For instance, in an Rlogin buffer (@pxref{Remote Host}), Compilation minor mode automatically accesses remote source files by FTP (@pxref{File Names})."
msgstr ""

#. type: section
#: src/building.texi:314
#, no-wrap
msgid "Subshells for Compilation"
msgstr ""

#. type: Plain text
#: src/building.texi:321
msgid "This section includes various techniques and advice for using a shell and its features in compilation buffers.  This material is specific to local compilations, and will most probably not work in (or be irrelevant to) compilation buffers whose default directory is on remote hosts."
msgstr ""

#. type: Plain text
#: src/building.texi:332
msgid "The @kbd{M-x compile} command uses a shell to run the compilation command, but specifies the option for a noninteractive shell.  This means, in particular, that the shell should start with no prompt.  If you find your usual shell prompt making an unsightly appearance in the @file{*compilation*} buffer, it means you have made a mistake in your shell's init file by setting the prompt unconditionally.  (This init file may be named @file{.bashrc}, @file{.profile}, @file{.cshrc}, @file{.shrc}, etc., depending on what shell you use.)  The shell init file should set the prompt only if there already is a prompt.  Here's how to do it in bash:"
msgstr ""

#. type: example
#: src/building.texi:337
#, no-wrap
msgid "if [ \"$@{PS1+set@}\" = set ]\n"
"then PS1=@dots{}\n"
"fi\n"
msgstr ""

#. type: Plain text
#: src/building.texi:341
msgid "And here's how to do it in csh:"
msgstr ""

#. type: example
#: src/building.texi:344
#, no-wrap
msgid "if ($?prompt) set prompt = @dots{}\n"
msgstr ""

#. type: vindex
#: src/building.texi:346
#, no-wrap
msgid "TERM@r{, environment variable, in compilation mode}"
msgstr ""

#. type: Plain text
#: src/building.texi:350
msgid "If you want to customize the value of the @env{TERM} environment variable passed to the compilation subshell, customize the variable @code{comint-terminfo-terminal} (@pxref{Shell Options})."
msgstr ""

#. type: Plain text
#: src/building.texi:357
msgid "Emacs does not expect a compiler process to launch asynchronous subprocesses; if it does, and they keep running after the main compiler process has terminated, Emacs may kill them or their output may not arrive in Emacs.  To avoid this problem, make the main compilation process wait for its subprocesses to finish.  In a shell script, you can do this using @samp{$!} and @samp{wait}, like this:"
msgstr ""

#. type: example
#: src/building.texi:362
#, no-wrap
msgid "(sleep 10; echo 2nd)& pid=$!  # @r{Record pid of subprocess}\n"
"echo first message\n"
"wait $pid                     # @r{Wait for subprocess}\n"
msgstr ""

#. type: Plain text
#: src/building.texi:368
msgid "If the background process does not output to the compilation buffer, so you only need to prevent it from being killed when the main compilation process terminates, this is sufficient:"
msgstr ""

#. type: example
#: src/building.texi:371
#, no-wrap
msgid "nohup @var{command}; sleep 1\n"
msgstr ""

#. type: ifnottex
#: src/building.texi:378
msgid "On MS-DOS, asynchronous subprocesses are not supported, so @kbd{M-x compile} runs the compilation command synchronously (i.e., you must wait until the command finishes before you can do anything else in Emacs).  @xref{MS-DOS}."
msgstr ""

#. type: section
#: src/building.texi:381
#, no-wrap
msgid "Searching with Grep under Emacs"
msgstr ""

#. type: Plain text
#: src/building.texi:389
msgid "Just as you can run a compiler from Emacs and then visit the lines with compilation errors, you can also run @command{grep} and then visit the lines on which matches were found.  This works by treating the matches reported by @command{grep} as if they were errors.  The output buffer uses Grep mode, which is a variant of Compilation mode (@pxref{Compilation Mode})."
msgstr ""

#. type: item
#: src/building.texi:391
#, no-wrap
msgid "M-x grep"
msgstr ""

#. type: itemx
#: src/building.texi:392
#, no-wrap
msgid "M-x lgrep"
msgstr ""

#. type: table
#: src/building.texi:395
msgid "Run @command{grep} asynchronously under Emacs, listing matching lines in the buffer named @file{*grep*}."
msgstr ""

#. type: item
#: src/building.texi:395
#, no-wrap
msgid "M-x grep-find"
msgstr ""

#. type: itemx
#: src/building.texi:396
#, no-wrap
msgid "M-x find-grep"
msgstr ""

#. type: itemx
#: src/building.texi:397
#, no-wrap
msgid "M-x rgrep"
msgstr ""

#. type: table
#: src/building.texi:400
msgid "Run @command{grep} via @code{find}, and collect output in the @file{*grep*} buffer."
msgstr ""

#. type: item
#: src/building.texi:400
#, no-wrap
msgid "M-x zrgrep"
msgstr ""

#. type: table
#: src/building.texi:402
msgid "Run @code{zgrep} and collect output in the @file{*grep*} buffer."
msgstr ""

#. type: item
#: src/building.texi:402
#, no-wrap
msgid "M-x kill-grep"
msgstr ""

#. type: table
#: src/building.texi:404
msgid "Kill the running @command{grep} subprocess."
msgstr ""

#. type: findex
#: src/building.texi:406
#, no-wrap
msgid "grep"
msgstr ""

#. type: Plain text
#: src/building.texi:415
msgid "To run @command{grep}, type @kbd{M-x grep}, then enter a command line that specifies how to run @command{grep}.  Use the same arguments you would give @command{grep} when running it normally: a @command{grep}-style regexp (usually in single-quotes to quote the shell's special characters) followed by file names, which may use wildcards.  If you specify a prefix argument for @kbd{M-x grep}, it finds the identifier (@pxref{Xref}) in the buffer around point, and puts that into the default @command{grep} command."
msgstr ""

#. type: Plain text
#: src/building.texi:419
msgid "Your command need not simply run @command{grep}; you can use any shell command that produces output in the same format.  For instance, you can chain @command{grep} commands, like this:"
msgstr ""

#. type: example
#: src/building.texi:422
#, no-wrap
msgid "grep -nH -e foo *.el | grep bar | grep toto\n"
msgstr ""

#. type: Plain text
#: src/building.texi:429
msgid "The output from @command{grep} goes in the @file{*grep*} buffer.  You can find the corresponding lines in the original files using @w{@kbd{M-g M-n}}, @key{RET}, and so forth, just like compilation errors.  @xref{Compilation Mode}, for detailed description of commands and key bindings available in the @file{*grep*} buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:435
msgid "Some grep programs accept a @samp{--color} option to output special markers around matches for the purpose of highlighting.  You can make use of this feature by setting @code{grep-highlight-matches} to @code{t}.  When displaying a match in the source buffer, the exact match will be highlighted, instead of the entire source line."
msgstr ""

#. type: Plain text
#: src/building.texi:439
msgid "As with compilation commands (@pxref{Compilation}), while the grep command runs, the mode line shows the running number of matches found and highlighted so far."
msgstr ""

#. type: Plain text
#: src/building.texi:448
msgid "The @command{grep} commands will offer to save buffers before running.  This is controlled by the @code{grep-save-buffers} variable.  The possible values are either @code{nil} (don't save), @code{ask} (ask before saving), or a function which will be used as a predicate (and is called with the file name as the parameter and should return non-@code{nil} if the buffer is to be saved).  Any other non-@code{nil} value means that all buffers should be saved without asking.  The default is @code{ask}."
msgstr ""

#. type: findex
#: src/building.texi:449
#, no-wrap
msgid "grep-find"
msgstr ""

#. type: findex
#: src/building.texi:450
#, no-wrap
msgid "find-grep"
msgstr ""

#. type: Plain text
#: src/building.texi:456
msgid "The command @kbd{M-x grep-find} (also available as @kbd{M-x find-grep}) is similar to @kbd{M-x grep}, but it supplies a different initial default for the command---one that runs both @code{find} and @command{grep}, so as to search every file in a directory tree.  See also the @code{find-grep-dired} command, in @ref{Dired and Find}."
msgstr ""

#. type: findex
#: src/building.texi:457
#, no-wrap
msgid "lgrep"
msgstr ""

#. type: findex
#: src/building.texi:458
#, no-wrap
msgid "rgrep"
msgstr ""

#. type: findex
#: src/building.texi:459
#, no-wrap
msgid "zrgrep"
msgstr ""

#. type: Plain text
#: src/building.texi:468
msgid "The commands @kbd{M-x lgrep} (local grep) and @kbd{M-x rgrep} (recursive grep) are more user-friendly versions of @command{grep} and @code{grep-find}, which prompt separately for the regular expression to match, the files to search, and the base directory for the search.  Case sensitivity of the search is controlled by the current value of @code{case-fold-search}.  The command @kbd{M-x zrgrep} is similar to @kbd{M-x rgrep}, but it calls @command{zgrep} instead of @command{grep} to search the contents of gzipped files."
msgstr ""

#. type: Plain text
#: src/building.texi:473
msgid "These commands build the shell commands based on the variables @code{grep-template} (for @code{lgrep}) and @code{grep-find-template} (for @code{rgrep}).  The files to search can use aliases defined in the variable @code{grep-files-aliases}."
msgstr ""

#. type: vindex
#: src/building.texi:474
#, no-wrap
msgid "grep-find-ignored-directories"
msgstr ""

#. type: Plain text
#: src/building.texi:479
msgid "Directories listed in the variable @code{grep-find-ignored-directories} are automatically skipped by @kbd{M-x rgrep}.  The default value includes the data directories used by various version control systems."
msgstr ""

#. type: vindex
#: src/building.texi:480
#, no-wrap
msgid "grep-find-abbreviate"
msgstr ""

#. type: findex
#: src/building.texi:481
#, no-wrap
msgid "grep-find-toggle-abbreviation"
msgstr ""

#. type: Plain text
#: src/building.texi:491
msgid "By default, the shell commands constructed for @code{lgrep}, @code{rgrep}, and @code{zgrep} are abbreviated for display by concealing the part that contains a long list of files and directories to ignore.  You can reveal the concealed part by clicking on the button with ellipsis, which represents them.  You can also interactively toggle viewing the concealed part by typing @kbd{M-x grep-find-toggle-abbreviation}.  To disable this abbreviation of the shell commands, customize the option @code{grep-find-abbreviate} to a @code{nil} value."
msgstr ""

#. type: section
#: src/building.texi:493
#, no-wrap
msgid "Finding Syntax Errors On The Fly"
msgstr ""

#. type: cindex
#: src/building.texi:494
#, no-wrap
msgid "checking syntax"
msgstr ""

#. type: Plain text
#: src/building.texi:507
msgid "Flymake mode is a minor mode that performs on-the-fly syntax checking for many programming and markup languages, including C, C++, Perl, HTML, and @TeX{}/@LaTeX{}.  It is somewhat analogous to Flyspell mode, which performs spell checking for ordinary human languages in a similar fashion (@pxref{Spelling}).  As you edit a file, Flymake mode runs an appropriate syntax checking tool in the background, using a temporary copy of the buffer.  It then parses the error and warning messages, and highlights the erroneous lines in the buffer.  The syntax checking tool used depends on the language; for example, for C/C++ files this is usually the C compiler.  Flymake can also use build tools such as @code{make} for checking complicated projects."
msgstr ""

#. type: Plain text
#: src/building.texi:513
msgid "To enable Flymake mode, type @kbd{M-x flymake-mode}.  You can jump to the errors that it finds by using @kbd{M-x flymake-goto-next-error} and @kbd{M-x flymake-goto-prev-error}.  To display any error messages associated with the current line, type @kbd{M-x flymake-display-err-menu-for-current-line}."
msgstr ""

#. type: Plain text
#: src/building.texi:515
msgid "For more details about using Flymake,"
msgstr ""

#. type: ifnottex
#: src/building.texi:517
msgid "see @ref{Top, Flymake, Flymake, flymake, The Flymake Manual}."
msgstr ""

#. type: iftex
#: src/building.texi:520
msgid "see the Flymake Info manual, which is distributed with Emacs."
msgstr ""

#. type: section
#: src/building.texi:523
#, no-wrap
msgid "Running Debuggers Under Emacs"
msgstr ""

#. type: cindex
#: src/building.texi:524
#, no-wrap
msgid "debuggers"
msgstr ""

#. type: cindex
#: src/building.texi:525
#, no-wrap
msgid "GUD library"
msgstr ""

#. type: cindex
#: src/building.texi:526
#, no-wrap
msgid "GDB"
msgstr ""

#. type: cindex
#: src/building.texi:527
#, no-wrap
msgid "DBX"
msgstr ""

#. type: cindex
#: src/building.texi:528
#, no-wrap
msgid "SDB"
msgstr ""

#. type: cindex
#: src/building.texi:529
#, no-wrap
msgid "XDB"
msgstr ""

#. type: cindex
#: src/building.texi:530
#, no-wrap
msgid "Perldb"
msgstr ""

#. type: cindex
#: src/building.texi:531
#, no-wrap
msgid "JDB"
msgstr ""

#. type: cindex
#: src/building.texi:532
#, no-wrap
msgid "PDB"
msgstr ""

#. type: Plain text
#: src/building.texi:538
msgid "The GUD (Grand Unified Debugger) library provides an Emacs interface to a wide variety of symbolic debuggers.  It can run the GNU Debugger (GDB), as well as DBX, SDB, XDB, Guile REPL debug commands, Perl's debugging mode, the Python debugger PDB, and the Java Debugger JDB."
msgstr ""

#. type: Plain text
#: src/building.texi:542
msgid "Emacs provides a special interface to GDB, which uses extra Emacs windows to display the state of the debugged program.  @xref{GDB Graphical Interface}."
msgstr ""

#. type: Plain text
#: src/building.texi:546
msgid "Emacs also has a built-in debugger for Emacs Lisp programs.  @xref{Debugging,, The Lisp Debugger, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: subsection
#: src/building.texi:554 src/building.texi:556 src/building.texi:557
#, no-wrap
msgid "Starting GUD"
msgstr ""

#. type: menuentry
#: src/building.texi:554
msgid "How to start a debugger subprocess."
msgstr ""

#. type: subsection
#: src/building.texi:554 src/building.texi:625 src/building.texi:626
#, no-wrap
msgid "Debugger Operation"
msgstr ""

#. type: menuentry
#: src/building.texi:554
msgid "Connection between the debugger and source buffers."
msgstr ""

#. type: subsection
#: src/building.texi:554 src/building.texi:695 src/building.texi:696
#, no-wrap
msgid "Commands of GUD"
msgstr ""

#. type: menuentry
#: src/building.texi:554
msgid "Key bindings for common commands."
msgstr ""

#. type: subsection
#: src/building.texi:554 src/building.texi:843 src/building.texi:844
#, no-wrap
msgid "GUD Customization"
msgstr ""

#. type: menuentry
#: src/building.texi:554
msgid "Defining your own commands for GUD."
msgstr ""

#. type: subsection
#: src/building.texi:554 src/building.texi:918 src/building.texi:919
#, no-wrap
msgid "GDB Graphical Interface"
msgstr ""

#. type: menuentry
#: src/building.texi:554
msgid "An enhanced mode that uses GDB features to implement a graphical debugging environment."
msgstr ""

#. type: Plain text
#: src/building.texi:561
msgid "There are several commands for starting a debugger subprocess, each corresponding to a particular debugger program."
msgstr ""

#. type: item
#: src/building.texi:563
#, no-wrap
msgid "M-x gdb"
msgstr ""

#. type: findex
#: src/building.texi:564
#, no-wrap
msgid "gdb"
msgstr ""

#. type: table
#: src/building.texi:568
msgid "Run GDB as a subprocess, and interact with it via an IDE-like Emacs interface.  @xref{GDB Graphical Interface}, for more information about this command."
msgstr ""

#. type: item
#: src/building.texi:569
#, no-wrap
msgid "M-x gud-gdb"
msgstr ""

#. type: findex
#: src/building.texi:570
#, no-wrap
msgid "gud-gdb"
msgstr ""

#. type: table
#: src/building.texi:574
msgid "Run GDB, using a GUD interaction buffer for input and output to the GDB subprocess (@pxref{Debugger Operation}).  If such a buffer already exists, switch to it; otherwise, create the buffer and switch to it."
msgstr ""

#. type: table
#: src/building.texi:577
msgid "The other commands in this list do the same, for other debugger programs."
msgstr ""

#. type: item
#: src/building.texi:578
#, no-wrap
msgid "M-x perldb"
msgstr ""

#. type: findex
#: src/building.texi:579
#, no-wrap
msgid "perldb"
msgstr ""

#. type: table
#: src/building.texi:581
msgid "Run the Perl interpreter in debug mode."
msgstr ""

#. type: item
#: src/building.texi:582
#, no-wrap
msgid "M-x jdb"
msgstr ""

#. type: findex
#: src/building.texi:583
#, no-wrap
msgid "jdb"
msgstr ""

#. type: table
#: src/building.texi:585
msgid "Run the Java debugger."
msgstr ""

#. type: item
#: src/building.texi:586
#, no-wrap
msgid "M-x pdb"
msgstr ""

#. type: findex
#: src/building.texi:587
#, no-wrap
msgid "pdb"
msgstr ""

#. type: table
#: src/building.texi:589
msgid "Run the Python debugger."
msgstr ""

#. type: item
#: src/building.texi:590
#, no-wrap
msgid "M-x guiler"
msgstr ""

#. type: findex
#: src/building.texi:591
#, no-wrap
msgid "guiler"
msgstr ""

#. type: table
#: src/building.texi:593
msgid "Run Guile REPL for debugging Guile Scheme programs."
msgstr ""

#. type: item
#: src/building.texi:594
#, no-wrap
msgid "M-x dbx"
msgstr ""

#. type: findex
#: src/building.texi:595
#, no-wrap
msgid "dbx"
msgstr ""

#. type: table
#: src/building.texi:597
msgid "Run the DBX debugger."
msgstr ""

#. type: item
#: src/building.texi:598
#, no-wrap
msgid "M-x xdb"
msgstr ""

#. type: findex
#: src/building.texi:599
#, no-wrap
msgid "xdb"
msgstr ""

#. type: vindex
#: src/building.texi:600
#, no-wrap
msgid "gud-xdb-directories"
msgstr ""

#. type: table
#: src/building.texi:602
msgid "Run the XDB debugger."
msgstr ""

#. type: item
#: src/building.texi:603
#, no-wrap
msgid "M-x sdb"
msgstr ""

#. type: findex
#: src/building.texi:604
#, no-wrap
msgid "sdb"
msgstr ""

#. type: table
#: src/building.texi:606
msgid "Run the SDB debugger."
msgstr ""

#. type: Plain text
#: src/building.texi:615
msgid "Each of these commands reads a command line to invoke the debugger, using the minibuffer.  The minibuffer's initial contents contain the standard executable name and options for the debugger, and sometimes also a guess for the name of the executable file you want to debug.  Shell wildcards and variables are not allowed in this command line.  Emacs assumes that the first command argument which does not start with a @samp{-} is the executable file name."
msgstr ""

#. type: cindex
#: src/building.texi:616
#, no-wrap
msgid "remote host, debugging on"
msgstr ""

#. type: Plain text
#: src/building.texi:624
msgid "Tramp provides a facility for remote debugging, whereby both the debugger and the program being debugged are on the same remote host.  @xref{Running a debugger on a remote host,,, tramp, The Tramp Manual}, for details.  This is separate from GDB's remote debugging feature, where the program and the debugger run on different machines (@pxref{Remote Debugging,, Debugging Remote Programs, gdb, The GNU debugger})."
msgstr ""

#. type: cindex
#: src/building.texi:627
#, no-wrap
msgid "GUD interaction buffer"
msgstr ""

#. type: Plain text
#: src/building.texi:633
msgid "The @dfn{GUD interaction buffer} is an Emacs buffer which is used to send text commands to a debugger subprocess, and record its output.  This is the basic interface for interacting with a debugger, used by @kbd{M-x gud-gdb} and other commands listed in"
msgstr ""

#. type: iftex
#: src/building.texi:635
msgid "the preceding section."
msgstr ""

#. type: ifnottex
#: src/building.texi:638
msgid "@ref{Starting GUD}."
msgstr ""

#. type: Plain text
#: src/building.texi:642
msgid "The @kbd{M-x gdb} command extends this interface with additional specialized buffers for controlling breakpoints, stack frames, and other aspects of the debugger state (@pxref{GDB Graphical Interface})."
msgstr ""

#. type: Plain text
#: src/building.texi:648
msgid "The GUD interaction buffer uses a variant of Shell mode, so the Emacs commands defined by Shell mode are available (@pxref{Shell Mode}).  Completion is available for most debugger commands (@pxref{Completion}), and you can use the usual Shell mode history commands to repeat them."
msgstr ""

#. type: iftex
#: src/building.texi:650
msgid "See the next section"
msgstr ""

#. type: ifnottex
#: src/building.texi:653
msgid "@xref{Commands of GUD},"
msgstr ""

#. type: Plain text
#: src/building.texi:655
msgid "for special commands that can be used in the GUD interaction buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:666
msgid "As you debug a program, Emacs displays the relevant source files by visiting them in Emacs buffers, with an arrow in the left fringe indicating the current execution line.  (On a text terminal, the arrow appears as @samp{=>}, overlaid on the first two text columns.)  Moving point in such a buffer does not move the arrow.  You are free to edit these source files, but note that inserting or deleting lines will throw off the arrow's positioning, as Emacs has no way to figure out which edited source line corresponds to the line reported by the debugger subprocess.  To update this information, you typically have to recompile and restart the program."
msgstr ""

#. type: cindex
#: src/building.texi:667
#, no-wrap
msgid "GUD Tooltip mode"
msgstr ""

#. type: cindex
#: src/building.texi:668
#, no-wrap
msgid "mode, GUD Tooltip"
msgstr ""

#. type: findex
#: src/building.texi:669
#, no-wrap
msgid "gud-tooltip-mode"
msgstr ""

#. type: vindex
#: src/building.texi:670
#, no-wrap
msgid "gud-tooltip-echo-area"
msgstr ""

#. type: Plain text
#: src/building.texi:686
msgid "GUD Tooltip mode is a global minor mode that adds tooltip support to GUD@.  To toggle this mode, type @kbd{M-x gud-tooltip-mode}.  It is disabled by default.  If enabled, you can move the mouse pointer over a variable, a function, or a macro (collectively called @dfn{identifiers}) to show their values in tooltips (@pxref{Tooltips}).  If just placing the mouse pointer over an expression doesn't show the value of the expression you had in mind, you can tell Emacs more explicitly what expression to evaluate by dragging the mouse over the expression, then leaving the mouse inside the marked area.  The GUD Tooltip mode takes effect in the GUD interaction buffer, and in all source buffers with major modes listed in the variable @code{gud-tooltip-modes}.  If the variable @code{gud-tooltip-echo-area} is non-@code{nil}, or if you turned off the tooltip mode, values are shown in the echo area instead of a tooltip."
msgstr ""

#. type: Plain text
#: src/building.texi:694
msgid "When using GUD Tooltip mode with @kbd{M-x gud-gdb}, displaying an expression's value in GDB can sometimes expand a macro, potentially causing side effects in the debugged program.  For that reason, using tooltips in @code{gud-gdb} is disabled.  If you use the @kbd{M-x gdb} interface, this problem does not occur, as there is special code to avoid side-effects; furthermore, you can display macro definitions associated with an identifier when the program is not executing."
msgstr ""

#. type: Plain text
#: src/building.texi:700
msgid "GUD provides commands for setting and clearing breakpoints, selecting stack frames, and stepping through the program."
msgstr ""

#. type: kindex
#: src/building.texi:702 src/building.texi:703
#, no-wrap
msgid "C-x C-a C-b"
msgstr ""

#. type: table
#: src/building.texi:705
msgid "Set a breakpoint on the source line that point is on."
msgstr ""

#. type: Plain text
#: src/building.texi:712
msgid "@kbd{C-x C-a C-b} (@code{gud-break}), when called in a source buffer, sets a debugger breakpoint on the current source line.  This command is available only after starting GUD@.  If you call it in a buffer that is not associated with any debugger subprocess, it signals an error."
msgstr ""

#. type: kindex
#: src/building.texi:713
#, no-wrap
msgid "C-x C-a @r{(GUD)}"
msgstr ""

#. type: Plain text
#: src/building.texi:720
msgid "The following commands are available both in the GUD interaction buffer and globally, but with different key bindings.  The keys starting with @kbd{C-c} are available only in the GUD interaction buffer, while those starting with @kbd{C-x C-a} are available globally.  Some of these commands are also available via the tool bar; some are not supported by certain debuggers."
msgstr ""

#. type: item
#: src/building.texi:722
#, no-wrap
msgid "C-c C-l"
msgstr ""

#. type: kindex
#: src/building.texi:723
#, no-wrap
msgid "C-c C-l @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:724
#, no-wrap
msgid "C-x C-a C-l"
msgstr ""

#. type: findex
#: src/building.texi:725
#, no-wrap
msgid "gud-refresh"
msgstr ""

#. type: table
#: src/building.texi:728
msgid "Display, in another window, the last source line referred to in the GUD interaction buffer (@code{gud-refresh})."
msgstr ""

#. type: item
#: src/building.texi:729
#, no-wrap
msgid "C-c C-s"
msgstr ""

#. type: kindex
#: src/building.texi:730
#, no-wrap
msgid "C-c C-s @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:731
#, no-wrap
msgid "C-x C-a C-s"
msgstr ""

#. type: findex
#: src/building.texi:732
#, no-wrap
msgid "gud-step"
msgstr ""

#. type: table
#: src/building.texi:736
msgid "Execute the next single line of code (@code{gud-step}).  If the line contains a function call, execution stops after entering the called function."
msgstr ""

#. type: item
#: src/building.texi:737
#, no-wrap
msgid "C-c C-n"
msgstr ""

#. type: kindex
#: src/building.texi:738
#, no-wrap
msgid "C-c C-n @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:739
#, no-wrap
msgid "C-x C-a C-n"
msgstr ""

#. type: findex
#: src/building.texi:740
#, no-wrap
msgid "gud-next"
msgstr ""

#. type: table
#: src/building.texi:743
msgid "Execute the next single line of code, stepping across function calls without stopping inside the functions (@code{gud-next})."
msgstr ""

#. type: item
#: src/building.texi:744
#, no-wrap
msgid "C-c C-i"
msgstr ""

#. type: kindex
#: src/building.texi:745
#, no-wrap
msgid "C-c C-i @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:746
#, no-wrap
msgid "C-x C-a C-i"
msgstr ""

#. type: findex
#: src/building.texi:747
#, no-wrap
msgid "gud-stepi"
msgstr ""

#. type: table
#: src/building.texi:749
msgid "Execute a single machine instruction (@code{gud-stepi})."
msgstr ""

#. type: item
#: src/building.texi:750
#, no-wrap
msgid "C-c C-p"
msgstr ""

#. type: kindex
#: src/building.texi:751
#, no-wrap
msgid "C-c C-p @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:752
#, no-wrap
msgid "C-x C-a C-p"
msgstr ""

#. type: findex
#: src/building.texi:753
#, no-wrap
msgid "gud-print"
msgstr ""

#. type: table
#: src/building.texi:757
msgid "Evaluate the expression at point (@code{gud-print}).  If Emacs does not print the exact expression that you want, mark it as a region first."
msgstr ""

#. type: item
#: src/building.texi:759
#, no-wrap
msgid "C-c C-r"
msgstr ""

#. type: kindex
#: src/building.texi:760
#, no-wrap
msgid "C-c C-r @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:761
#, no-wrap
msgid "C-x C-a C-r"
msgstr ""

#. type: findex
#: src/building.texi:762
#, no-wrap
msgid "gud-cont"
msgstr ""

#. type: table
#: src/building.texi:766
msgid "Continue execution without specifying any stopping point.  The program will run until it hits a breakpoint, terminates, or gets a signal that the debugger is checking for (@code{gud-cont})."
msgstr ""

#. type: item
#: src/building.texi:768
#, no-wrap
msgid "C-c C-d"
msgstr ""

#. type: kindex
#: src/building.texi:769
#, no-wrap
msgid "C-c C-d @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:770
#, no-wrap
msgid "C-x C-a C-d"
msgstr ""

#. type: findex
#: src/building.texi:771
#, no-wrap
msgid "gud-remove"
msgstr ""

#. type: table
#: src/building.texi:775
msgid "Delete the breakpoint(s) on the current source line, if any (@code{gud-remove}).  If you use this command in the GUD interaction buffer, it applies to the line where the program last stopped."
msgstr ""

#. type: item
#: src/building.texi:776
#, no-wrap
msgid "C-c C-t"
msgstr ""

#. type: kindex
#: src/building.texi:777
#, no-wrap
msgid "C-c C-t @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:778
#, no-wrap
msgid "C-x C-a C-t"
msgstr ""

#. type: findex
#: src/building.texi:779
#, no-wrap
msgid "gud-tbreak"
msgstr ""

#. type: table
#: src/building.texi:783
msgid "Set a temporary breakpoint on the current source line, if any (@code{gud-tbreak}).  If you use this command in the GUD interaction buffer, it applies to the line where the program last stopped."
msgstr ""

#. type: item
#: src/building.texi:784
#, no-wrap
msgid "C-c <"
msgstr ""

#. type: kindex
#: src/building.texi:785
#, no-wrap
msgid "C-c < @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:786
#, no-wrap
msgid "C-x C-a <"
msgstr ""

#. type: findex
#: src/building.texi:787
#, no-wrap
msgid "gud-up"
msgstr ""

#. type: table
#: src/building.texi:790
msgid "Select the next enclosing stack frame (@code{gud-up}).  This is equivalent to the GDB command @samp{up}."
msgstr ""

#. type: item
#: src/building.texi:791
#, no-wrap
msgid "C-c >"
msgstr ""

#. type: kindex
#: src/building.texi:792
#, no-wrap
msgid "C-c > @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:793
#, no-wrap
msgid "C-x C-a >"
msgstr ""

#. type: findex
#: src/building.texi:794
#, no-wrap
msgid "gud-down"
msgstr ""

#. type: table
#: src/building.texi:797
msgid "Select the next inner stack frame (@code{gud-down}).  This is equivalent to the GDB command @samp{down}."
msgstr ""

#. type: item
#: src/building.texi:798
#, no-wrap
msgid "C-c C-u"
msgstr ""

#. type: kindex
#: src/building.texi:799
#, no-wrap
msgid "C-c C-u @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:800
#, no-wrap
msgid "C-x C-a C-u"
msgstr ""

#. type: findex
#: src/building.texi:801
#, no-wrap
msgid "gud-until"
msgstr ""

#. type: table
#: src/building.texi:806
msgid "Continue execution to the current line (@code{gud-until}).  The program will run until it hits a breakpoint, terminates, gets a signal that the debugger is checking for, or reaches the line on which the cursor currently sits."
msgstr ""

#. type: kindex
#: src/building.texi:808
#, no-wrap
msgid "C-c C-f @r{(GUD)}"
msgstr ""

#. type: itemx
#: src/building.texi:809
#, no-wrap
msgid "C-x C-a C-f"
msgstr ""

#. type: findex
#: src/building.texi:810
#, no-wrap
msgid "gud-finish"
msgstr ""

#. type: table
#: src/building.texi:813
msgid "Run the program until the selected stack frame returns or stops for some other reason (@code{gud-finish})."
msgstr ""

#. type: Plain text
#: src/building.texi:816
msgid "If you are using GDB, these additional key bindings are available:"
msgstr ""

#. type: item
#: src/building.texi:818
#, no-wrap
msgid "C-x C-a C-j"
msgstr ""

#. type: kindex
#: src/building.texi:819
#, no-wrap
msgid "C-x C-a C-j @r{(GUD)}"
msgstr ""

#. type: findex
#: src/building.texi:820
#, no-wrap
msgid "gud-jump"
msgstr ""

#. type: table
#: src/building.texi:828
msgid "Only useful in a source buffer, @code{gud-jump} transfers the program's execution point to the current line.  In other words, the next line that the program executes will be the one where you gave the command.  If the new execution line is in a different function from the previously one, GDB prompts for confirmation since the results may be bizarre.  See the GDB manual entry regarding @code{jump} for details."
msgstr ""

#. type: key{#1}
#: src/building.texi:829
#, no-wrap
msgid "TAB"
msgstr ""

#. type: kindex
#: src/building.texi:830
#, no-wrap
msgid "TAB @r{(GUD)}"
msgstr "TAB @r{(GUD)}"

#. type: findex
#: src/building.texi:831
#, no-wrap
msgid "gud-gdb-complete-command"
msgstr ""

#. type: table
#: src/building.texi:834
msgid "With GDB, complete a symbol name (@code{gud-gdb-complete-command}).  This key is available only in the GUD interaction buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:838
msgid "These commands interpret a numeric argument as a repeat count, when that makes sense."
msgstr ""

#. type: Plain text
#: src/building.texi:842
msgid "Because @key{TAB} serves as a completion command, you can't use it to enter a tab as input to the program you are debugging with GDB@.  Instead, type @kbd{C-q @key{TAB}} to enter a tab."
msgstr ""

#. type: vindex
#: src/building.texi:846
#, no-wrap
msgid "gdb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:847
#, no-wrap
msgid "dbx-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:848
#, no-wrap
msgid "sdb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:849
#, no-wrap
msgid "xdb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:850
#, no-wrap
msgid "perldb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:851
#, no-wrap
msgid "pdb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:852
#, no-wrap
msgid "jdb-mode-hook"
msgstr ""

#. type: vindex
#: src/building.texi:853
#, no-wrap
msgid "guiler-mode-hook"
msgstr ""

#. type: Plain text
#: src/building.texi:861
msgid "On startup, GUD runs one of the following hooks: @code{gdb-mode-hook}, if you are using GDB; @code{dbx-mode-hook}, if you are using DBX; @code{sdb-mode-hook}, if you are using SDB; @code{xdb-mode-hook}, if you are using XDB; @code{guiler-mode-hook} for Guile REPL debugging; @code{perldb-mode-hook}, for Perl debugging mode; @code{pdb-mode-hook}, for PDB; @code{jdb-mode-hook}, for JDB@.  @xref{Hooks}."
msgstr ""

#. type: Plain text
#: src/building.texi:866
msgid "The @code{gud-def} Lisp macro (@pxref{Defining Macros,,, elisp, the Emacs Lisp Reference Manual}) provides a convenient way to define an Emacs command that sends a particular command string to the debugger, and set up a key binding for in the GUD interaction buffer:"
msgstr ""

#. type: findex
#: src/building.texi:867
#, no-wrap
msgid "gud-def"
msgstr ""

#. type: example
#: src/building.texi:870
#, no-wrap
msgid "(gud-def @var{function} @var{cmdstring} @var{binding} @var{docstring})\n"
msgstr ""

#. type: Plain text
#: src/building.texi:878
msgid "This defines a command named @var{function} which sends @var{cmdstring} to the debugger process, and gives it the documentation string @var{docstring}.  You can then use the command @var{function} in any buffer.  If @var{binding} is non-@code{nil}, @code{gud-def} also binds the command to @kbd{C-c @var{binding}} in the GUD buffer's mode and to @kbd{C-x C-a @var{binding}} generally."
msgstr ""

#. type: Plain text
#: src/building.texi:882
msgid "The command string @var{cmdstring} may contain certain @samp{%}-sequences that stand for data to be filled in at the time @var{function} is called:"
msgstr ""

#. type: item
#: src/building.texi:884
#, no-wrap
msgid "%f"
msgstr ""

#. type: table
#: src/building.texi:888
msgid "The name of the current source file.  If the current buffer is the GUD buffer, then the current source file is the file that the program stopped in."
msgstr ""

#. type: item
#: src/building.texi:889
#, no-wrap
msgid "%l"
msgstr ""

#. type: table
#: src/building.texi:893
msgid "The number of the current source line.  If the current buffer is the GUD buffer, then the current source line is the line that the program stopped in."
msgstr ""

#. type: item
#: src/building.texi:894
#, no-wrap
msgid "%e"
msgstr ""

#. type: table
#: src/building.texi:898
msgid "In transient-mark-mode the text in the region, if it is active.  Otherwise the text of the C lvalue or function-call expression at or adjacent to point."
msgstr ""

#. type: item
#: src/building.texi:899
#, no-wrap
msgid "%a"
msgstr ""

#. type: table
#: src/building.texi:901
msgid "The text of the hexadecimal address at or adjacent to point."
msgstr ""

#. type: item
#: src/building.texi:902
#, no-wrap
msgid "%p"
msgstr ""

#. type: table
#: src/building.texi:906
msgid "The numeric argument of the called function, as a decimal number.  If the command is used without a numeric argument, @samp{%p} stands for the empty string."
msgstr ""

#. type: table
#: src/building.texi:909
msgid "If you don't use @samp{%p} in the command string, the command you define ignores any numeric argument."
msgstr ""

#. type: item
#: src/building.texi:910
#, no-wrap
msgid "%d"
msgstr ""

#. type: table
#: src/building.texi:912
msgid "The name of the directory of the current source file."
msgstr ""

#. type: item
#: src/building.texi:913
#, no-wrap
msgid "%c"
msgstr ""

#. type: table
#: src/building.texi:916
msgid "Fully qualified class name derived from the expression surrounding point (jdb only)."
msgstr ""

#. type: Plain text
#: src/building.texi:926
msgid "The command @kbd{M-x gdb} starts GDB in an IDE-like interface, with specialized buffers for controlling breakpoints, stack frames, and other aspects of the debugger state.  It also provides additional ways to control the debugging session with the mouse, such as clicking in the fringe of a source buffer to set a breakpoint there."
msgstr ""

#. type: vindex
#: src/building.texi:927
#, no-wrap
msgid "gud-gdb-command-name"
msgstr ""

#. type: Plain text
#: src/building.texi:933
msgid "To run GDB using just the GUD interaction buffer interface, without these additional features, use @kbd{M-x gud-gdb} (@pxref{Starting GUD}).  You must use this if you want to debug multiple programs within one Emacs session, as that is currently unsupported by @kbd{M-x gdb}."
msgstr ""

#. type: Plain text
#: src/building.texi:937
msgid "Internally, @kbd{M-x gdb} informs GDB that its screen size is unlimited; for correct operation, you must not change GDB's screen height and width values during the debugging session."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:950 src/building.texi:951
#, no-wrap
msgid "GDB User Interface Layout"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Control the number of displayed buffers."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1011 src/building.texi:1012
#, no-wrap
msgid "Source Buffers"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Use the mouse in the fringe/margin to control your program."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1064 src/building.texi:1065
#, no-wrap
msgid "Breakpoints Buffer"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "A breakpoint control panel."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1105 src/building.texi:1106
#, no-wrap
msgid "Threads Buffer"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Displays your threads."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1181 src/building.texi:1182
#, no-wrap
msgid "Stack Buffer"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Select a frame from the call stack."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1208 src/building.texi:1209
#, no-wrap
msgid "Other GDB Buffers"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Other buffers for controlling the GDB state."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1253 src/building.texi:1254
#, no-wrap
msgid "Watch Expressions"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Monitor variable values in the speedbar."
msgstr ""

#. type: subsubsection
#: src/building.texi:948 src/building.texi:1320 src/building.texi:1321
#, no-wrap
msgid "Multithreaded Debugging"
msgstr ""

#. type: menuentry
#: src/building.texi:948
msgid "Debugging programs with several threads."
msgstr ""

#. type: cindex
#: src/building.texi:952
#, no-wrap
msgid "GDB User Interface layout"
msgstr ""

#. type: findex
#: src/building.texi:954 src/building.texi:979
#, no-wrap
msgid "gdb-many-windows"
msgstr ""

#. type: vindex
#: src/building.texi:955
#, no-wrap
msgid "gdb-show-main"
msgstr ""

#. type: Plain text
#: src/building.texi:962
msgid "If the variable @code{gdb-many-windows} is @code{nil} (the default), @kbd{M-x gdb} normally displays only the GUD interaction buffer.  However, if the variable @code{gdb-show-main} is also non-@code{nil}, it starts with two windows: one displaying the GUD interaction buffer, and the other showing the source for the @code{main} function of the program you are debugging."
msgstr ""

#. type: Plain text
#: src/building.texi:965
msgid "If @code{gdb-many-windows} is non-@code{nil}, then @kbd{M-x gdb} displays the following frame layout:"
msgstr ""

#. type: group
#: src/building.texi:975
#, no-wrap
msgid "+--------------------------------+--------------------------------+\n"
"|   GUD interaction buffer       |   Locals/Registers buffer      |\n"
"|--------------------------------+--------------------------------+\n"
"|   Primary Source buffer        |   I/O buffer for debugged pgm  |\n"
"|--------------------------------+--------------------------------+\n"
"|   Stack buffer                 |   Breakpoints/Threads buffer   |\n"
"+--------------------------------+--------------------------------+\n"
msgstr ""

#. type: findex
#: src/building.texi:978
#, no-wrap
msgid "gdb-restore-windows"
msgstr ""

#. type: Plain text
#: src/building.texi:984
msgid "If you ever change the window layout, you can restore the many-windows layout by typing @kbd{M-x gdb-restore-windows}.  To toggle between the many windows layout and a simple layout with just the GUD interaction buffer and a source file, type @kbd{M-x gdb-many-windows}."
msgstr ""

#. type: Plain text
#: src/building.texi:992
msgid "If you have an elaborate window setup, and don't want @code{gdb-many-windows} to disrupt that, it is better to invoke @kbd{M-x gdb} in a separate frame to begin with, then the arrangement of windows on your original frame will not be affected.  A separate frame for GDB sessions can come in especially handy if you work on a text-mode terminal, where the screen estate for windows could be at a premium."
msgstr ""

#. type: Plain text
#: src/building.texi:1000
msgid "You may also specify additional GDB-related buffers to display, either in the same frame or a different one.  Select the buffers you want by typing @kbd{M-x gdb-display-@var{buffertype}-buffer} or @kbd{M-x gdb-frame-@var{buffertype}-buffer}, where @var{buffertype} is the relevant buffer type, such as @samp{breakpoints}.  You can do the same with the menu bar, with the @samp{GDB-Windows} and @samp{GDB-Frames} sub-menus of the @samp{GUD} menu."
msgstr ""

#. type: Plain text
#: src/building.texi:1010
msgid "When you finish debugging, kill the GUD interaction buffer with @kbd{C-x k}, which will also kill all the buffers associated with the session.  However you need not do this if, after editing and re-compiling your source code within Emacs, you wish to continue debugging.  When you restart execution, GDB automatically finds the new executable.  Keeping the GUD interaction buffer has the advantage of keeping the shell history as well as GDB's breakpoints.  You do need to check that the breakpoints in recently edited source files are still in the right places."
msgstr ""

#. type: cindex
#: src/building.texi:1013
#, no-wrap
msgid "fringes, for debugging"
msgstr ""

#. type: item
#: src/building.texi:1016
#, no-wrap
msgid "@kbd{mouse-1} (in fringe)"
msgstr ""

#. type: table
#: src/building.texi:1019
msgid "Set or clear a breakpoint on that line (@code{gdb-mouse-set-clear-breakpoint})."
msgstr ""

#. type: item
#: src/building.texi:1020
#, no-wrap
msgid "@kbd{C-mouse-1} (in fringe)"
msgstr ""

#. type: table
#: src/building.texi:1023
msgid "Enable or disable a breakpoint on that line (@code{gdb-mouse-toggle-breakpoint-margin})."
msgstr ""

#. type: item
#: src/building.texi:1024
#, no-wrap
msgid "@kbd{mouse-3} (in fringe)"
msgstr ""

#. type: table
#: src/building.texi:1026
msgid "Continue execution to that line (@code{gdb-mouse-until})."
msgstr ""

#. type: item
#: src/building.texi:1027
#, no-wrap
msgid "@kbd{C-mouse-3} (in fringe)"
msgstr ""

#. type: table
#: src/building.texi:1029
msgid "Jump to that line (@code{gdb-mouse-jump})."
msgstr ""

#. type: Plain text
#: src/building.texi:1037
msgid "On a graphical display, you can click @kbd{mouse-1} in the fringe of a source buffer, to set a breakpoint on that line (@pxref{Fringes}).  A red dot appears in the fringe, where you clicked.  If a breakpoint already exists there, the click removes it.  A @kbd{C-mouse-1} click enables or disables an existing breakpoint; a breakpoint that is disabled, but not unset, is indicated by a gray dot."
msgstr ""

#. type: Plain text
#: src/building.texi:1042
msgid "On a text terminal, or when fringes are disabled, enabled breakpoints are indicated with a @samp{B} character in the left margin of the window.  Disabled breakpoints are indicated with @samp{b}.  (The margin is only displayed if a breakpoint is present.)"
msgstr ""

#. type: Plain text
#: src/building.texi:1054
msgid "A solid arrow in the left fringe of a source buffer indicates the line of the innermost frame where the debugged program has stopped.  A hollow arrow indicates the current execution line of a higher-level frame.  If you drag the arrow in the fringe with @kbd{mouse-1}, that causes execution to advance to the line where you release the button.  Alternatively, you can click @kbd{mouse-3} in the fringe to advance to that line.  You can click @kbd{C-mouse-3} in the fringe to jump to that line without executing the intermediate lines.  This command allows you to go backwards, which can be useful for running through code that has already executed, in order to examine its execution in more detail."
msgstr ""

#. type: vindex
#: src/building.texi:1055
#, no-wrap
msgid "gdb-mi-decode-strings"
msgstr ""

#. type: Plain text
#: src/building.texi:1063
msgid "If the file names of the source files are shown with octal escapes, set the variable @code{gdb-mi-decode-strings} to the appropriate coding-system, most probably @code{utf-8}.  (This is @code{nil} by default because GDB may emit octal escapes in situations where decoding is undesirable, and also because the program being debugged might use an encoding different from the one used to encode non-ASCII file names on your system.)"
msgstr ""

#. type: Plain text
#: src/building.texi:1071
msgid "The GDB Breakpoints buffer shows the breakpoints, watchpoints and catchpoints in the debugger session.  @xref{Breakpoints,,, gdb, The GNU debugger}.  It provides the following commands, which mostly apply to the @dfn{current breakpoint} (the breakpoint which point is on):"
msgstr ""

#. type: key{#1}
#: src/building.texi:1073
#, no-wrap
msgid "SPC"
msgstr ""

#. type: kindex
#: src/building.texi:1074
#, no-wrap
msgid "SPC @r{(GDB Breakpoints buffer)}"
msgstr "SPC @r{(GDB Breakpoints buffer)}"

#. type: findex
#: src/building.texi:1075
#, no-wrap
msgid "gdb-toggle-breakpoint"
msgstr ""

#. type: table
#: src/building.texi:1080
msgid "Enable/disable current breakpoint (@code{gdb-toggle-breakpoint}).  On a graphical display, this changes the color of the dot in the fringe of the source buffer at that line.  The dot is red when the breakpoint is enabled, and gray when it is disabled."
msgstr ""

#. type: item
#: src/building.texi:1081
#, no-wrap
msgid "D"
msgstr ""

#. type: kindex
#: src/building.texi:1082
#, no-wrap
msgid "D @r{(GDB Breakpoints buffer)}"
msgstr "D @r{(GDB Breakpoints buffer)}"

#. type: findex
#: src/building.texi:1083
#, no-wrap
msgid "gdb-delete-breakpoint"
msgstr ""

#. type: table
#: src/building.texi:1085
msgid "Delete the current breakpoint (@code{gdb-delete-breakpoint})."
msgstr ""

#. type: key{#1}
#: src/building.texi:1086
#, no-wrap
msgid "RET"
msgstr ""

#. type: kindex
#: src/building.texi:1087
#, no-wrap
msgid "RET @r{(GDB Breakpoints buffer)}"
msgstr "RET @r{(GDB Breakpoints buffer)}"

#. type: findex
#: src/building.texi:1088
#, no-wrap
msgid "gdb-goto-breakpoint"
msgstr ""

#. type: table
#: src/building.texi:1091
msgid "Visit the source line for the current breakpoint (@code{gdb-goto-breakpoint})."
msgstr ""

#. type: item
#: src/building.texi:1092
#, no-wrap
msgid "mouse-2"
msgstr ""

#. type: kindex
#: src/building.texi:1093
#, no-wrap
msgid "mouse-2 @r{(GDB Breakpoints buffer)}"
msgstr "mouse-2 @r{(GDB Breakpoints buffer)}"

#. type: table
#: src/building.texi:1096
msgid "Visit the source line for the breakpoint you click on (@code{gdb-goto-breakpoint})."
msgstr ""

#. type: vindex
#: src/building.texi:1098
#, no-wrap
msgid "gdb-show-threads-by-default"
msgstr ""

#. type: Plain text
#: src/building.texi:1104
msgid "When @code{gdb-many-windows} is non-@code{nil}, the GDB Breakpoints buffer shares its window with the GDB Threads buffer.  To switch from one to the other click with @kbd{mouse-1} on the relevant button in the header line.  If @code{gdb-show-threads-by-default} is non-@code{nil}, the GDB Threads buffer is the one shown by default."
msgstr ""

#. type: findex
#: src/building.texi:1108
#, no-wrap
msgid "gdb-select-thread"
msgstr ""

#. type: Plain text
#: src/building.texi:1115
msgid "The GDB Threads buffer displays a summary of the threads in the debugged program.  @xref{Threads, Threads, Debugging programs with multiple threads, gdb, The GNU debugger}.  To select a thread, move point there and press @key{RET} (@code{gdb-select-thread}), or click on it with @kbd{mouse-2}.  This also displays the associated source buffer, and updates the contents of the other GDB buffers."
msgstr ""

#. type: Plain text
#: src/building.texi:1118
msgid "You can customize variables in the @code{gdb-buffers} group to select fields included in GDB Threads buffer."
msgstr ""

#. type: vindex
#: src/building.texi:1120 src/building.texi:1121
#, no-wrap
msgid "gdb-thread-buffer-verbose-names"
msgstr ""

#. type: table
#: src/building.texi:1123
msgid "Show long thread names like @samp{Thread 0x4e2ab70 (LWP 1983)}."
msgstr ""

#. type: vindex
#: src/building.texi:1124 src/building.texi:1125
#, no-wrap
msgid "gdb-thread-buffer-arguments"
msgstr ""

#. type: table
#: src/building.texi:1127
msgid "Show arguments of thread top frames."
msgstr ""

#. type: vindex
#: src/building.texi:1128 src/building.texi:1129
#, no-wrap
msgid "gdb-thread-buffer-locations"
msgstr ""

#. type: table
#: src/building.texi:1131
msgid "Show file information or library names."
msgstr ""

#. type: vindex
#: src/building.texi:1132 src/building.texi:1133
#, no-wrap
msgid "gdb-thread-buffer-addresses"
msgstr ""

#. type: table
#: src/building.texi:1135
msgid "Show addresses for thread frames in threads buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:1139
msgid "To view information for several threads simultaneously, use the following commands from the GDB Threads buffer."
msgstr ""

#. type: item
#: src/building.texi:1141
#, no-wrap
msgid "d"
msgstr ""

#. type: kindex
#: src/building.texi:1142
#, no-wrap
msgid "d @r{(GDB threads buffer)}"
msgstr "d @r{(GDB threads buffer)}"

#. type: findex
#: src/building.texi:1143
#, no-wrap
msgid "gdb-display-disassembly-for-thread"
msgstr ""

#. type: table
#: src/building.texi:1146
msgid "Display disassembly buffer for the thread at current line (@code{gdb-display-disassembly-for-thread})."
msgstr ""

#. type: item
#: src/building.texi:1147
#, no-wrap
msgid "f"
msgstr ""

#. type: kindex
#: src/building.texi:1148
#, no-wrap
msgid "f @r{(GDB threads buffer)}"
msgstr "f @r{(GDB threads buffer)}"

#. type: findex
#: src/building.texi:1149
#, no-wrap
msgid "gdb-display-stack-for-thread"
msgstr ""

#. type: table
#: src/building.texi:1152
msgid "Display the GDB Stack buffer for the thread at current line (@code{gdb-display-stack-for-thread})."
msgstr ""

#. type: item
#: src/building.texi:1153
#, no-wrap
msgid "l"
msgstr ""

#. type: kindex
#: src/building.texi:1154
#, no-wrap
msgid "l @r{(GDB threads buffer)}"
msgstr "l @r{(GDB threads buffer)}"

#. type: findex
#: src/building.texi:1155
#, no-wrap
msgid "gdb-display-locals-for-thread"
msgstr ""

#. type: table
#: src/building.texi:1158
msgid "Display the GDB Locals buffer for the thread at current line (@code{gdb-display-locals-for-thread})."
msgstr ""

#. type: item
#: src/building.texi:1159
#, no-wrap
msgid "r"
msgstr ""

#. type: kindex
#: src/building.texi:1160
#, no-wrap
msgid "r @r{(GDB threads buffer)}"
msgstr "r @r{(GDB threads buffer)}"

#. type: findex
#: src/building.texi:1161
#, no-wrap
msgid "gdb-display-registers-for-thread"
msgstr ""

#. type: table
#: src/building.texi:1164
msgid "Display the GDB Registers buffer for the thread at current line (@code{gdb-display-registers-for-thread})."
msgstr ""

#. type: Plain text
#: src/building.texi:1169
msgid "Their upper-case counterparts, @kbd{D}, @kbd{F} ,@kbd{L} and @kbd{R}, display the corresponding buffer in a new frame."
msgstr ""

#. type: Plain text
#: src/building.texi:1176
msgid "When you create a buffer showing information about some specific thread, it becomes bound to that thread and keeps showing actual information while you debug your program.  The mode indicator for each GDB buffer shows the number of the thread whose information that buffer displays.  The thread number is also included in the name of each bound buffer."
msgstr ""

#. type: Plain text
#: src/building.texi:1180
msgid "Further commands are available in the GDB Threads buffer which depend on the mode of GDB that is used for controlling execution of your program.  @xref{Multithreaded Debugging}."
msgstr ""

#. type: Plain text
#: src/building.texi:1188
msgid "The GDB Stack buffer displays a @dfn{call stack}, with one line for each of the nested subroutine calls (@dfn{stack frames}) in the debugger session.  @xref{Backtrace,, Backtraces, gdb, The GNU debugger}."
msgstr ""

#. type: findex
#: src/building.texi:1189
#, no-wrap
msgid "gdb-frames-select"
msgstr ""

#. type: Plain text
#: src/building.texi:1196
msgid "On graphical displays, the selected stack frame is indicated by an arrow in the fringe.  On text terminals, or when fringes are disabled, the selected stack frame is displayed in reverse contrast.  To select a stack frame, move point in its line and type @key{RET} (@code{gdb-frames-select}), or click @kbd{mouse-2} on it.  Doing so also updates the Locals buffer"
msgstr ""

#. type: ifnottex
#: src/building.texi:1198
msgid "(@pxref{Other GDB Buffers})."
msgstr ""

#. type: iftex
#: src/building.texi:1201
msgid "(described in the next section)."
msgstr ""

#. type: vindex
#: src/building.texi:1203
#, no-wrap
msgid "gdb-stack-buffer-addresses"
msgstr ""

#. type: Plain text
#: src/building.texi:1207
msgid "If you want the frame address to be shown each stack frame, customize the variable @code{gdb-stack-buffer-addresses} to a non-@code{nil} value."
msgstr ""

#. type: item
#: src/building.texi:1212
#, no-wrap
msgid "Locals Buffer"
msgstr ""

#. type: table
#: src/building.texi:1217
msgid "This buffer displays the values of local variables of the current frame for simple data types (@pxref{Frame Info, Frame Info, Information on a frame, gdb, The GNU debugger}).  Press @key{RET} or click @kbd{mouse-2} on the value if you want to edit it."
msgstr ""

#. type: table
#: src/building.texi:1223
msgid "Arrays and structures display their type only.  With GDB 6.4 or later, you can examine the value of the local variable at point by typing @key{RET}, or with a @kbd{mouse-2} click.  With earlier versions of GDB, use @key{RET} or @kbd{mouse-2} on the type description (@samp{[struct/union]} or @samp{[array]}).  @xref{Watch Expressions}."
msgstr ""

#. type: item
#: src/building.texi:1224
#, no-wrap
msgid "Registers Buffer"
msgstr ""

#. type: findex
#: src/building.texi:1225
#, no-wrap
msgid "toggle-gdb-all-registers"
msgstr ""

#. type: table
#: src/building.texi:1231
msgid "This buffer displays the values held by the registers (@pxref{Registers,,, gdb, The GNU debugger}).  Press @key{RET} or click @kbd{mouse-2} on a register if you want to edit its value.  With GDB 6.4 or later, recently changed register values display with @code{font-lock-warning-face}."
msgstr ""

#. type: item
#: src/building.texi:1232
#, no-wrap
msgid "Assembler Buffer"
msgstr ""

#. type: table
#: src/building.texi:1237
msgid "The assembler buffer displays the current frame as machine code.  An arrow points to the current instruction, and you can set and remove breakpoints as in a source buffer.  Breakpoint icons also appear in the fringe or margin."
msgstr ""

#. type: item
#: src/building.texi:1238
#, no-wrap
msgid "Memory Buffer"
msgstr ""

#. type: table
#: src/building.texi:1246
msgid "The memory buffer lets you examine sections of program memory (@pxref{Memory, Memory, Examining memory, gdb, The GNU debugger}).  Click @kbd{mouse-1} on the appropriate part of the header line to change the starting address or number of data items that the buffer displays.  Alternatively, use @kbd{S} or @kbd{N} respectively.  Click @kbd{mouse-3} on the header line to select the display format or unit size for these data items."
msgstr ""

#. type: Plain text
#: src/building.texi:1252
msgid "When @code{gdb-many-windows} is non-@code{nil}, the locals buffer shares its window with the registers buffer, just like breakpoints and threads buffers.  To switch from one to the other, click with @kbd{mouse-1} on the relevant button in the header line."
msgstr ""

#. type: cindex
#: src/building.texi:1255
#, no-wrap
msgid "Watching expressions in GDB"
msgstr ""

#. type: findex
#: src/building.texi:1257
#, no-wrap
msgid "gud-watch"
msgstr ""

#. type: kindex
#: src/building.texi:1258
#, no-wrap
msgid "C-x C-a C-w @r{(GUD)}"
msgstr "C-x C-a C-w @r{(GUD)}"

#. type: Plain text
#: src/building.texi:1264
msgid "If you want to see how a variable changes each time your program stops, move point into the variable name and click on the watch icon in the tool bar (@code{gud-watch}) or type @kbd{C-x C-a C-w}.  If you specify a prefix argument, you can enter the variable name in the minibuffer."
msgstr ""

#. type: Plain text
#: src/building.texi:1274
msgid "Each watch expression is displayed in the speedbar (@pxref{Speedbar}).  Complex data types, such as arrays, structures and unions are represented in a tree format.  Leaves and simple data types show the name of the expression and its value and, when the speedbar frame is selected, display the type as a tooltip.  Higher levels show the name, type and address value for pointers and just the name and type otherwise.  Root expressions also display the frame address as a tooltip to help identify the frame in which they were defined."
msgstr ""

#. type: Plain text
#: src/building.texi:1280
msgid "To expand or contract a complex data type, click @kbd{mouse-2} or press @key{SPC} on the tag to the left of the expression.  Emacs asks for confirmation before expanding the expression if its number of immediate children exceeds the value of the variable @code{gdb-max-children}."
msgstr ""

#. type: kindex
#: src/building.texi:1281
#, no-wrap
msgid "D @r{(GDB speedbar)}"
msgstr "D @r{(GDB speedbar)}"

#. type: findex
#: src/building.texi:1282
#, no-wrap
msgid "gdb-var-delete"
msgstr ""

#. type: Plain text
#: src/building.texi:1285
msgid "To delete a complex watch expression, move point to the root expression in the speedbar and type @kbd{D} (@code{gdb-var-delete})."
msgstr ""

#. type: kindex
#: src/building.texi:1286
#, no-wrap
msgid "RET @r{(GDB speedbar)}"
msgstr "RET @r{(GDB speedbar)}"

#. type: findex
#: src/building.texi:1287
#, no-wrap
msgid "gdb-edit-value"
msgstr ""

#. type: Plain text
#: src/building.texi:1292
msgid "To edit a variable with a simple data type, or a simple element of a complex data type, move point there in the speedbar and type @key{RET} (@code{gdb-edit-value}).  Or you can click @kbd{mouse-2} on a value to edit it.  Either way, this reads the new value using the minibuffer."
msgstr ""

#. type: vindex
#: src/building.texi:1293
#, no-wrap
msgid "gdb-show-changed-values"
msgstr ""

#. type: Plain text
#: src/building.texi:1300
msgid "If you set the variable @code{gdb-show-changed-values} to non-@code{nil} (the default value), Emacs uses @code{font-lock-warning-face} to highlight values that have recently changed and @code{shadow} face to make variables which have gone out of scope less noticeable.  When a variable goes out of scope you can't edit its value."
msgstr ""

#. type: vindex
#: src/building.texi:1301
#, no-wrap
msgid "gdb-delete-out-of-scope"
msgstr ""

#. type: Plain text
#: src/building.texi:1307
msgid "If the variable @code{gdb-delete-out-of-scope} is non-@code{nil} (the default value), Emacs automatically deletes watch expressions which go out of scope.  Sometimes, when your program re-enters the same function many times, it may be useful to set this value to @code{nil} so that you don't need to recreate the watch expression."
msgstr ""

#. type: vindex
#: src/building.texi:1308
#, no-wrap
msgid "gdb-use-colon-colon-notation"
msgstr ""

#. type: Plain text
#: src/building.texi:1313
msgid "If the variable @code{gdb-use-colon-colon-notation} is non-@code{nil}, Emacs uses the @samp{@var{function}::@var{variable}} format.  This allows the user to display watch expressions which share the same variable name.  The default value is @code{nil}."
msgstr ""

#. type: vindex
#: src/building.texi:1314
#, no-wrap
msgid "gdb-speedbar-auto-raise"
msgstr ""

#. type: Plain text
#: src/building.texi:1319
msgid "To automatically raise the speedbar every time the display of watch expressions updates, set @code{gdb-speedbar-auto-raise} to non-@code{nil}.  This can be useful if you are debugging with a full screen Emacs frame."
msgstr ""

#. type: cindex
#: src/building.texi:1322
#, no-wrap
msgid "Multithreaded debugging in GDB"
msgstr ""

#. type: cindex
#: src/building.texi:1323
#, no-wrap
msgid "Non-stop debugging in GDB"
msgstr ""

#. type: Plain text
#: src/building.texi:1334
msgid "In GDB's @dfn{all-stop mode}, whenever your program stops, all execution threads stop.  Likewise, whenever you restart the program, all threads start executing.  @xref{All-Stop Mode, , All-Stop Mode, gdb, The GNU debugger}.  For some multi-threaded targets, GDB supports a further mode of operation, called @dfn{non-stop mode}, in which you can examine stopped program threads in the debugger while other threads continue to execute freely.  @xref{Non-Stop Mode, , Non-Stop Mode, gdb, The GNU debugger}.  Versions of GDB prior to 7.0 do not support non-stop mode, and it does not work on all targets."
msgstr ""

#. type: vindex
#: src/building.texi:1335
#, no-wrap
msgid "gdb-non-stop-setting"
msgstr ""

#. type: Plain text
#: src/building.texi:1343
msgid "The variable @code{gdb-non-stop-setting} determines whether Emacs runs GDB in all-stop mode or non-stop mode.  The default is @code{t}, which means it tries to use non-stop mode if that is available.  If you change the value to @code{nil}, or if non-stop mode is unavailable, Emacs runs GDB in all-stop mode.  The variable takes effect when Emacs begins a debugging session; if you change its value, you should restart any active debugging session."
msgstr ""

#. type: vindex
#: src/building.texi:1344
#, no-wrap
msgid "gdb-switch-when-another-stopped"
msgstr ""

#. type: Plain text
#: src/building.texi:1349
msgid "When a thread stops in non-stop mode, Emacs usually switches to that thread.  If you don't want Emacs to do this switch if another stopped thread is already selected, change the variable @code{gdb-switch-when-another-stopped} to @code{nil}."
msgstr ""

#. type: vindex
#: src/building.texi:1350
#, no-wrap
msgid "gdb-switch-reasons"
msgstr ""

#. type: Plain text
#: src/building.texi:1355
msgid "Emacs can decide whether or not to switch to the stopped thread depending on the reason which caused the stop.  Customize the variable @code{gdb-switch-reasons} to select the stop reasons which will cause a thread switch."
msgstr ""

#. type: vindex
#: src/building.texi:1356
#, no-wrap
msgid "gdb-stopped-functions"
msgstr ""

#. type: Plain text
#: src/building.texi:1359
msgid "The variable @code{gdb-stopped-functions} allows you to execute your functions whenever some thread stops."
msgstr ""

#. type: Plain text
#: src/building.texi:1362
msgid "In non-stop mode, you can switch between different modes for GUD execution control commands."
msgstr ""

#. type: vindex
#: src/building.texi:1363
#, no-wrap
msgid "gdb-gud-control-all-threads"
msgstr ""

#. type: item
#: src/building.texi:1365
#, no-wrap
msgid "Non-stop/A"
msgstr ""

#. type: table
#: src/building.texi:1374
msgid "When @code{gdb-gud-control-all-threads} is @code{t} (the default value), interruption and continuation commands apply to all threads, so you can halt or continue all your threads with one command using @code{gud-stop-subjob} and @code{gud-cont}, respectively.  The @samp{Go} button is shown on the tool bar when at least one thread is stopped, whereas @samp{Stop} button is shown when at least one thread is running."
msgstr ""

#. type: item
#: src/building.texi:1375
#, no-wrap
msgid "Non-stop/T"
msgstr ""

#. type: table
#: src/building.texi:1381
msgid "When @code{gdb-gud-control-all-threads} is @code{nil}, only the current thread is stopped/continued.  @samp{Go} and @samp{Stop} buttons on the GUD tool bar are shown depending on the state of current thread."
msgstr ""

#. type: Plain text
#: src/building.texi:1385
msgid "You can change the current value of @code{gdb-gud-control-all-threads} from the tool bar or from @samp{GUD->GDB-MI} menu."
msgstr ""

#. type: Plain text
#: src/building.texi:1387
msgid "Stepping commands always apply to the current thread."
msgstr ""

#. type: Plain text
#: src/building.texi:1392
msgid "In non-stop mode, you can interrupt/continue your threads without selecting them.  Hitting @kbd{i} in threads buffer interrupts thread under point, @kbd{c} continues it, @kbd{s} steps through.  More such commands may be added in the future."
msgstr ""

#. type: Plain text
#: src/building.texi:1397
msgid "Note that when you interrupt a thread, it stops with the @samp{signal received} reason.  If that reason is included in your @code{gdb-switch-reasons} (it is by default), Emacs will switch to that thread."
msgstr ""

#. type: section
#: src/building.texi:1399
#, no-wrap
msgid "Executing Lisp Expressions"
msgstr ""

#. type: Plain text
#: src/building.texi:1405
msgid "Emacs has major modes for several variants of Lisp.  They use the same editing commands as other programming language modes (@pxref{Programs}).  In addition, they provide special commands for executing Lisp expressions."
msgstr ""

#. type: cindex
#: src/building.texi:1407 src/building.texi:1575
#, no-wrap
msgid "Emacs Lisp mode"
msgstr ""

#. type: table
#: src/building.texi:1410
msgid "The mode for editing Emacs Lisp source files.  It defines @kbd{C-M-x} to evaluate the current top-level Lisp expression.  @xref{Lisp Eval}."
msgstr ""

#. type: item
#: src/building.texi:1411
#, no-wrap
msgid "Lisp Interaction mode"
msgstr ""

#. type: table
#: src/building.texi:1415
msgid "The mode for an interactive Emacs Lisp session.  It defines @kbd{C-j} to evaluate the expression before point and insert its value in the buffer.  @xref{Lisp Interaction}."
msgstr ""

#. type: cindex
#: src/building.texi:1416 src/building.texi:1720
#, no-wrap
msgid "Lisp mode"
msgstr ""

#. type: table
#: src/building.texi:1420
msgid "The mode for editing source files of programs that run in Lisps other than Emacs Lisp.  It defines @kbd{C-M-x} to evaluate the current top-level expression in an external Lisp.  @xref{External Lisp}."
msgstr ""

#. type: item
#: src/building.texi:1421
#, no-wrap
msgid "Inferior Lisp mode"
msgstr ""

#. type: table
#: src/building.texi:1424
msgid "The mode for an interactive session with an external Lisp which is being run as a subprocess (or @dfn{inferior process}) of Emacs."
msgstr ""

#. type: ifnottex
#: src/building.texi:1426
msgid "@xref{External Lisp}."
msgstr ""

#. type: cindex
#: src/building.texi:1428 src/building.texi:1761
#, no-wrap
msgid "Scheme mode"
msgstr ""

#. type: table
#: src/building.texi:1430
msgid "Like Lisp mode, but for Scheme programs."
msgstr ""

#. type: item
#: src/building.texi:1431
#, no-wrap
msgid "Inferior Scheme mode"
msgstr ""

#. type: table
#: src/building.texi:1433
msgid "Like Inferior Lisp mode, but for Scheme."
msgstr ""

#. type: node
#: src/building.texi:1435
#, no-wrap
msgid "Lisp Libraries"
msgstr ""

#. type: section
#: src/building.texi:1436
#, no-wrap
msgid "Libraries of Lisp Code for Emacs"
msgstr ""

#. type: cindex
#: src/building.texi:1437
#, no-wrap
msgid "libraries"
msgstr ""

#. type: cindex
#: src/building.texi:1438
#, no-wrap
msgid "loading Lisp code"
msgstr ""

#. type: Plain text
#: src/building.texi:1442
msgid "Emacs Lisp code is stored in files whose names conventionally end in @file{.el}.  Such files are automatically visited in Emacs Lisp mode."
msgstr ""

#. type: cindex
#: src/building.texi:1443
#, no-wrap
msgid "byte code"
msgstr ""

#. type: Plain text
#: src/building.texi:1450
msgid "Emacs Lisp code can be compiled into byte-code, which loads faster, takes up less space, and executes faster.  By convention, compiled Emacs Lisp code goes in a separate file whose name ends in @samp{.elc}.  For example, the compiled code for @file{foo.el} goes in @file{foo.elc}.  @xref{Byte Compilation,, Byte Compilation, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: findex
#: src/building.texi:1451
#, no-wrap
msgid "load-file"
msgstr ""

#. type: Plain text
#: src/building.texi:1457
msgid "To @dfn{load} an Emacs Lisp file, type @kbd{M-x load-file}.  This command reads a file name using the minibuffer, and executes the contents of that file as Emacs Lisp code.  It is not necessary to visit the file first; this command reads the file directly from disk, not from an existing Emacs buffer."
msgstr ""

#. type: findex
#: src/building.texi:1458
#, no-wrap
msgid "load"
msgstr ""

#. type: findex
#: src/building.texi:1459
#, no-wrap
msgid "load-library"
msgstr ""

#. type: vindex
#: src/building.texi:1460
#, no-wrap
msgid "load-prefer-newer"
msgstr ""

#. type: cindex
#: src/building.texi:1461
#, no-wrap
msgid "load path for Emacs Lisp"
msgstr ""

#. type: Plain text
#: src/building.texi:1481
msgid "If an Emacs Lisp file is installed in the Emacs Lisp @dfn{load path} (defined below), you can load it by typing @kbd{M-x load-library}, instead of using @kbd{M-x load-file}.  The @kbd{M-x load-library} command prompts for a @dfn{library name} rather than a file name; it searches through each directory in the Emacs Lisp load path, trying to find a file matching that library name.  If the library name is @samp{@var{foo}}, it tries looking for files named @file{@var{foo}.elc}, @file{@var{foo}.el}, and @file{@var{foo}}.  The default behavior is to load the first file found.  This command prefers @file{.elc} files over @file{.el} files because compiled files load and run faster.  If it finds that @file{@var{lib}.el} is newer than @file{@var{lib}.elc}, it issues a warning, in case someone made changes to the @file{.el} file and forgot to recompile it, but loads the @file{.elc} file anyway.  (Due to this behavior, you can save unfinished edits to Emacs Lisp source files, and not recompile until your changes are ready for use.)  If you set the option @code{load-prefer-newer} to a non-@code{nil} value, however, then rather than the procedure described above, Emacs loads whichever version of the file is newest."
msgstr ""

#. type: Plain text
#: src/building.texi:1486
msgid "Emacs Lisp programs usually load Emacs Lisp files using the @code{load} function.  This is similar to @code{load-library}, but is lower-level and accepts additional arguments.  @xref{How Programs Do Loading,,, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: vindex
#: src/building.texi:1487
#, no-wrap
msgid "load-path"
msgstr ""

#. type: Plain text
#: src/building.texi:1499
msgid "The Emacs Lisp load path is specified by the variable @code{load-path}.  Its value should be a list of directories (strings).  These directories are searched, in the specified order, by the @kbd{M-x load-library} command, the lower-level @code{load} function, and other Emacs functions that find Emacs Lisp libraries.  An entry in @code{load-path} can also have the special value @code{nil}, which stands for the current default directory, but it is almost always a bad idea to use this, because its meaning will depend on the buffer that is current when @code{load-path} is used by Emacs.  (If you find yourself wishing that @code{nil} were in the list, most likely what you really want is to use @kbd{M-x load-file}.)"
msgstr ""

#. type: Plain text
#: src/building.texi:1507
msgid "The default value of @code{load-path} is a list of directories where the Lisp code for Emacs itself is stored.  If you have libraries of your own in another directory, you can add that directory to the load path.  Unlike most other variables described in this manual, @code{load-path} cannot be changed via the Customize interface (@pxref{Easy Customization}), but you can add a directory to it by putting a line like this in your init file (@pxref{Init File}):"
msgstr ""

#. type: example
#: src/building.texi:1510
#, no-wrap
msgid "(add-to-list 'load-path \"/path/to/my/lisp/library\")\n"
msgstr ""

#. type: Plain text
#: src/building.texi:1516
msgid "It is customary to put locally installed libraries in the @file{site-lisp} directory that is already in the default value of @code{load-path}, or in some subdirectory of @file{site-lisp}.  This way, you don't need to modify the default value of @code{load-path}."
msgstr ""

#. type: cindex
#: src/building.texi:1517
#, no-wrap
msgid "autoload"
msgstr ""

#. type: Plain text
#: src/building.texi:1524
msgid "Some commands are @dfn{autoloaded}; when you run them, Emacs automatically loads the associated library first.  For instance, the @kbd{M-x compile} command (@pxref{Compilation}) is autoloaded; if you call it, Emacs automatically loads the @code{compile} library first.  In contrast, the command @kbd{M-x recompile} is not autoloaded, so it is unavailable until you load the @code{compile} library."
msgstr ""

#. type: vindex
#: src/building.texi:1525
#, no-wrap
msgid "help-enable-autoload"
msgstr ""

#. type: Plain text
#: src/building.texi:1532
msgid "Automatic loading can also occur when you look up the documentation of an autoloaded command (@pxref{Name Help}), if the documentation refers to other functions and variables in its library (loading the library lets Emacs properly set up the hyperlinks in the @file{*Help*} buffer).  To disable this feature, change the variable @code{help-enable-autoload} to @code{nil}."
msgstr ""

#. type: vindex
#: src/building.texi:1533
#, no-wrap
msgid "help-enable-completion-autoload"
msgstr ""

#. type: Plain text
#: src/building.texi:1538
msgid "Automatic loading also occurs when completing names for @code{describe-variable} and @code{describe-function}, based on the prefix being completed.  To disable this feature, change the variable @code{help-enable-completion-autoload} to @code{nil}."
msgstr ""

#. type: vindex
#: src/building.texi:1539
#, no-wrap
msgid "load-dangerous-libraries"
msgstr ""

#. type: cindex
#: src/building.texi:1540
#, no-wrap
msgid "Lisp files byte-compiled by XEmacs"
msgstr ""

#. type: Plain text
#: src/building.texi:1545
msgid "By default, Emacs refuses to load compiled Lisp files which were compiled with XEmacs, a modified version of Emacs---they can cause Emacs to crash.  Set the variable @code{load-dangerous-libraries} to @code{t} if you want to try loading them."
msgstr ""

#. type: Plain text
#: src/building.texi:1555
msgid "Once you put your library in a directory where Emacs can find and load it, you may wish to make it available at startup.  This is useful when the library defines features that should be available automatically on demand, and manually loading the library is thus inconvenient.  In these cases, make sure the library will be loaded by adding suitable forms to your init file: either @code{load} or @code{require} (if you always need to load the library at startup), or @code{autoload} if you need Emacs to load the library when some command or function is invoked.  For example:"
msgstr ""

#. type: group
#: src/building.texi:1560
#, no-wrap
msgid " ;; Loads @file{my-shining-package.elc} unconditionally.\n"
" (require 'my-shining-package)\n"
msgstr ""

#. type: group
#: src/building.texi:1564
#, no-wrap
msgid " ;; Will load @file{my-shining-package.elc} when @code{my-func} is invoked.\n"
" (autoload 'my-func \"my-shining-package\")\n"
msgstr ""

#. type: Plain text
#: src/building.texi:1572
msgid "Note that installing a package using @code{package-install} (@pxref{Package Installation}) takes care of placing the package's Lisp files in a directory where Emacs will find it, and also writes the necessary initialization code into your init files, making the above manual customizations unnecessary."
msgstr ""

#. type: node
#: src/building.texi:1573
#, no-wrap
msgid "Lisp Eval"
msgstr ""

#. type: section
#: src/building.texi:1574
#, no-wrap
msgid "Evaluating Emacs Lisp Expressions"
msgstr ""

#. type: cindex
#: src/building.texi:1576
#, no-wrap
msgid "mode, Emacs Lisp"
msgstr ""

#. type: cindex
#: src/building.texi:1577
#, no-wrap
msgid "evaluation, Emacs Lisp"
msgstr ""

#. type: findex
#: src/building.texi:1579
#, no-wrap
msgid "emacs-lisp-mode"
msgstr ""

#. type: Plain text
#: src/building.texi:1582
msgid "Emacs Lisp mode is the major mode for editing Emacs Lisp.  Its mode command is @kbd{M-x emacs-lisp-mode}."
msgstr ""

#. type: Plain text
#: src/building.texi:1589
msgid "Emacs provides several commands for evaluating Emacs Lisp expressions.  You can use these commands in Emacs Lisp mode, to test your Emacs Lisp code as it is being written.  For example, after re-writing a function, you can evaluate the function definition to make it take effect for subsequent function calls.  These commands are also available globally, and can be used outside Emacs Lisp mode."
msgstr ""

#. type: kindex
#: src/building.texi:1591 src/building.texi:1613
#, no-wrap
msgid "M-:"
msgstr "M-:"

#. type: table
#: src/building.texi:1594
msgid "Read a single Emacs Lisp expression in the minibuffer, evaluate it, and print the value in the echo area (@code{eval-expression})."
msgstr ""

#. type: kindex
#: src/building.texi:1594 src/building.texi:1622
#, no-wrap
msgid "C-x C-e"
msgstr "C-x C-e"

#. type: table
#: src/building.texi:1597
msgid "Evaluate the Emacs Lisp expression before point, and print the value in the echo area (@code{eval-last-sexp})."
msgstr ""

#. type: item
#: src/building.texi:1597
#, no-wrap
msgid "@kbd{C-M-x} @r{(in Emacs Lisp mode)}"
msgstr ""

#. type: kbd{#1}
#: src/building.texi:1598
#, no-wrap
msgid "M-x eval-defun"
msgstr ""

#. type: table
#: src/building.texi:1601
msgid "Evaluate the defun containing or after point, and print the value in the echo area (@code{eval-defun})."
msgstr ""

#. type: kbd{#1}
#: src/building.texi:1601
#, no-wrap
msgid "M-x eval-region"
msgstr ""

#. type: table
#: src/building.texi:1603
msgid "Evaluate all the Emacs Lisp expressions in the region."
msgstr ""

#. type: kbd{#1}
#: src/building.texi:1603
#, no-wrap
msgid "M-x eval-buffer"
msgstr ""

#. type: table
#: src/building.texi:1605
msgid "Evaluate all the Emacs Lisp expressions in the buffer."
msgstr ""

#. type: kindex
#: src/building.texi:1610
#, no-wrap
msgid "M-colon"
msgstr "M-colon"

#. type: findex
#: src/building.texi:1615
#, no-wrap
msgid "eval-expression"
msgstr ""

#. type: Plain text
#: src/building.texi:1621
msgid "@kbd{M-:} (@code{eval-expression}) reads an expression using the minibuffer, and evaluates it.  (Before evaluating the expression, the current buffer switches back to the buffer that was current when you typed @kbd{M-:}, not the minibuffer into which you typed the expression.)"
msgstr ""

#. type: findex
#: src/building.texi:1623
#, no-wrap
msgid "eval-last-sexp"
msgstr ""

#. type: Plain text
#: src/building.texi:1631
msgid "The command @kbd{C-x C-e} (@code{eval-last-sexp}) evaluates the Emacs Lisp expression preceding point in the buffer, and displays the value in the echo area.  When the result of an evaluation is an integer, it is displayed together with the value in other formats (octal, hexadecimal, and character if @code{eval-expression-print-maximum-character}, described below, allows it)."
msgstr ""

#. type: Plain text
#: src/building.texi:1642
msgid "If @kbd{M-:} or @kbd{C-x C-e} is given a prefix argument, it inserts the value into the current buffer at point, rather than displaying it in the echo area.  If the prefix argument is zero, any integer output is inserted together with its value in other formats (octal, hexadecimal, and character).  Such a prefix argument also prevents abbreviation of the output according to the variables @code{eval-expression-print-level} and @code{eval-expression-print-length} (see below).  Similarly, a prefix argument of @code{-1} overrides the effect of @code{eval-expression-print-length}."
msgstr ""

#. type: kindex
#: src/building.texi:1643
#, no-wrap
msgid "C-M-x @r{(Emacs Lisp mode)}"
msgstr "C-M-x @r{(Emacs Lisp mode)}"

#. type: findex
#: src/building.texi:1644
#, no-wrap
msgid "eval-defun"
msgstr ""

#. type: Plain text
#: src/building.texi:1658
msgid "The @code{eval-defun} command is bound to @kbd{C-M-x} in Emacs Lisp mode.  It evaluates the top-level Lisp expression containing or following point, and prints the value in the echo area.  In this context, a top-level expression is referred to as a ``defun'', but it need not be an actual @code{defun} (function definition).  In particular, this command treats @code{defvar} expressions specially.  Normally, evaluating a @code{defvar} expression does nothing if the variable it defines already has a value.  But this command unconditionally resets the variable to the initial value specified by the @code{defvar}; this is convenient for debugging Emacs Lisp programs.  @code{defcustom} and @code{defface} expressions are treated similarly.  Note that the other commands documented in this section do not have this special feature."
msgstr ""

#. type: Plain text
#: src/building.texi:1662
msgid "With a prefix argument, @kbd{C-M-x} instruments the function definition for Edebug, the Emacs Lisp Debugger.  @xref{Instrumenting, Instrumenting for Edebug,, elisp, the Emacs Lisp Reference Manual}."
msgstr ""

#. type: findex
#: src/building.texi:1663
#, no-wrap
msgid "eval-region"
msgstr ""

#. type: findex
#: src/building.texi:1664
#, no-wrap
msgid "eval-buffer"
msgstr ""

#. type: Plain text
#: src/building.texi:1668
msgid "The command @kbd{M-x eval-region} parses the text of the region as one or more Lisp expressions, evaluating them one by one.  @kbd{M-x eval-buffer} is similar but evaluates the entire buffer."
msgstr ""

#. type: vindex
#: src/building.texi:1669
#, no-wrap
msgid "eval-expression-print-level"
msgstr ""

#. type: vindex
#: src/building.texi:1670
#, no-wrap
msgid "eval-expression-print-length"
msgstr ""

#. type: vindex
#: src/building.texi:1671
#, no-wrap
msgid "eval-expression-print-maximum-character"
msgstr ""

#. type: vindex
#: src/building.texi:1672
#, no-wrap
msgid "eval-expression-debug-on-error"
msgstr ""

#. type: Plain text
#: src/building.texi:1683
msgid "The options @code{eval-expression-print-level} and @code{eval-expression-print-length} control the maximum depth and length of lists to print in the result of the evaluation commands before abbreviating them.  Supplying a zero prefix argument to @code{eval-expression} or @code{eval-last-sexp} causes lists to be printed in full.  @code{eval-expression-debug-on-error} controls whether evaluation errors invoke the debugger when these commands are used; its default is @code{t}.  @code{eval-expression-print-maximum-character} prevents integers which are larger than it from being displayed as characters."
msgstr ""

#. type: node
#: src/building.texi:1684
#, no-wrap
msgid "Lisp Interaction"
msgstr ""

#. type: section
#: src/building.texi:1685
#, no-wrap
msgid "Lisp Interaction Buffers"
msgstr ""

#. type: findex
#: src/building.texi:1687
#, no-wrap
msgid "lisp-interaction-mode"
msgstr ""

#. type: Plain text
#: src/building.texi:1692
msgid "When Emacs starts up, it contains a buffer named @file{*scratch*}, which is provided for evaluating Emacs Lisp expressions interactively.  Its major mode is Lisp Interaction mode.  You can also enable Lisp Interaction mode by typing @kbd{M-x lisp-interaction-mode}."
msgstr ""

#. type: findex
#: src/building.texi:1693
#, no-wrap
msgid "eval-print-last-sexp"
msgstr ""

#. type: kindex
#: src/building.texi:1694
#, no-wrap
msgid "C-j @r{(Lisp Interaction mode)}"
msgstr "C-j @r{(Lisp Interaction mode)}"

#. type: Plain text
#: src/building.texi:1702
msgid "In the @file{*scratch*} buffer, and other Lisp Interaction mode buffers, @kbd{C-j} (@code{eval-print-last-sexp}) evaluates the Lisp expression before point, and inserts the value at point.  Thus, as you type expressions into the buffer followed by @kbd{C-j} after each expression, the buffer records a transcript of the evaluated expressions and their values.  All other commands in Lisp Interaction mode are the same as in Emacs Lisp mode."
msgstr ""

#. type: vindex
#: src/building.texi:1703
#, no-wrap
msgid "initial-scratch-message"
msgstr ""

#. type: Plain text
#: src/building.texi:1709
msgid "At startup, the @file{*scratch*} buffer contains a short message, in the form of a Lisp comment, that explains what it is for.  This message is controlled by the variable @code{initial-scratch-message}, which should be either a documentation string, or @code{nil} (which means to suppress the message)."
msgstr ""

#. type: findex
#: src/building.texi:1710
#, no-wrap
msgid "ielm"
msgstr ""

#. type: Plain text
#: src/building.texi:1717
msgid "An alternative way of evaluating Emacs Lisp expressions interactively is to use Inferior Emacs Lisp mode, which provides an interface rather like Shell mode (@pxref{Shell Mode}) for evaluating Emacs Lisp expressions.  Type @kbd{M-x ielm} to create an @file{*ielm*} buffer which uses this mode.  For more information, see that command's documentation."
msgstr ""

#. type: section
#: src/building.texi:1719
#, no-wrap
msgid "Running an External Lisp"
msgstr ""

#. type: cindex
#: src/building.texi:1721
#, no-wrap
msgid "mode, Lisp"
msgstr ""

#. type: cindex
#: src/building.texi:1722
#, no-wrap
msgid "Common Lisp"
msgstr ""

#. type: Plain text
#: src/building.texi:1728
msgid "Lisp mode is the major mode for editing programs written in general-purpose Lisp dialects, such as Common Lisp.  Its mode command is @kbd{M-x lisp-mode}.  Emacs uses Lisp mode automatically for files whose names end in @file{.l}, @file{.lsp}, or @file{.lisp}."
msgstr ""

#. type: findex
#: src/building.texi:1729
#, no-wrap
msgid "run-lisp"
msgstr ""

#. type: vindex
#: src/building.texi:1730
#, no-wrap
msgid "inferior-lisp-program"
msgstr ""

#. type: kindex
#: src/building.texi:1731
#, no-wrap
msgid "C-x C-z"
msgstr "C-x C-z"

#. type: Plain text
#: src/building.texi:1739
msgid "You can run an external Lisp session as a subprocess or @dfn{inferior process} of Emacs, and pass expressions to it to be evaluated.  To begin an external Lisp session, type @kbd{M-x run-lisp}.  This runs the program named @command{lisp}, and sets it up so that both input and output go through an Emacs buffer named @file{*inferior-lisp*}.  To change the name of the Lisp program run by @kbd{M-x run-lisp}, change the variable @code{inferior-lisp-program}."
msgstr ""

#. type: Plain text
#: src/building.texi:1746
msgid "The major mode for the @file{*lisp*} buffer is Inferior Lisp mode, which combines the characteristics of Lisp mode and Shell mode (@pxref{Shell Mode}).  To send input to the Lisp session, go to the end of the @file{*lisp*} buffer and type the input, followed by @key{RET}.  Terminal output from the Lisp session is automatically inserted in the buffer."
msgstr ""

#. type: kindex
#: src/building.texi:1747
#, no-wrap
msgid "C-M-x @r{(Lisp mode)}"
msgstr "C-M-x @r{(Lisp mode)}"

#. type: findex
#: src/building.texi:1748
#, no-wrap
msgid "lisp-eval-defun"
msgstr ""

#. type: Plain text
#: src/building.texi:1758
msgid "When you edit a Lisp program in Lisp mode, you can type @kbd{C-M-x} (@code{lisp-eval-defun}) to send an expression from the Lisp mode buffer to a Lisp session that you had started with @kbd{M-x run-lisp}.  The expression sent is the top-level Lisp expression at or following point.  The resulting value goes as usual into the @file{*inferior-lisp*} buffer.  Note that the effect of @kbd{C-M-x} in Lisp mode is thus very similar to its effect in Emacs Lisp mode (@pxref{Lisp Eval}), except that the expression is sent to a different Lisp environment instead of being evaluated in Emacs."
msgstr ""

#. type: findex
#: src/building.texi:1759
#, no-wrap
msgid "scheme-mode"
msgstr ""

#. type: findex
#: src/building.texi:1760
#, no-wrap
msgid "run-scheme"
msgstr ""

#. type: cindex
#: src/building.texi:1762
#, no-wrap
msgid "mode, Scheme"
msgstr ""

#. type: kindex
#: src/building.texi:1763
#, no-wrap
msgid "C-M-x @r{(Scheme mode)}"
msgstr "C-M-x @r{(Scheme mode)}"

#. type: Plain text
#: src/building.texi:1769
msgid "The facilities for editing Scheme code, and for sending expressions to a Scheme subprocess, are very similar.  Scheme source files are edited in Scheme mode, which can be explicitly enabled with @kbd{M-x scheme-mode}.  You can initiate a Scheme session by typing @kbd{M-x run-scheme} (the buffer for interacting with Scheme is named @file{*scheme*}), and send expressions to it by typing @kbd{C-M-x}."
msgstr ""

